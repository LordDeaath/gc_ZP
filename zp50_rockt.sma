/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>
#include <engine>
#include <zp50_core>
#include <zp50_gamemodes>
#include <zp50_grenade_fire>
#include <zp50_class_survivor>
#include <zp50_class_knifer>
#include <zp50_fps>
#include <zp50_items>
#include <fun>
#include <reapi>

#define PLUGIN "Real Bazooka"
#define VERSION "1.0"
#define AUTHOR "Administrator"
new Itm_Bazooka, HasBazooka[33],g_bulletbillalive[33],LimitP
new  EXPLODESPRITE, SHOCKWAVESPRITE, RPGSPRITE;
const XO_CBASEPLAYERITEM = 4; const m_pPlayer_Hlds = 41; const m_flNextPrimaryAttack = 46; const m_pActiveItem_Hlds = 373;
const XO_CBASEPLAYER = 5; const m_iClip = 51; const m_iId_Hlds = 43; const m_pNext_Hlds = 42; 
const XO_CBASEPLAYERWEAPON = 4; const m_flTimeWeaponIdle_Hlds = 48; const OFFSET_P228_AMMO = 9; 
new const m_rgAmmo_CBasePlayer[32] = {376,377,...};
new const m_rgpPlayerItems_CBasePlayer[6] = {367, 368, ... }; 
const PLAYER_RELOAD = 9; 
new const WEAPON_RPG[] = "weapon_rpg3";
new const PLAYER[] = "player";
new cvar[1]
new gMsgBarTime;
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_think(WEAPON_RPG, "fwd_rpgbulletthink");
	Itm_Bazooka = zp_items_register("Bazooka","Rocket Launcher",35,0,0)
	register_touch(WEAPON_RPG, "*", "fwd_rpgbullettouch");
	register_event("CurWeapon", "event_CurWeapon", "be", "1=1")	
	RegisterHam(Ham_Item_Deploy, "weapon_p228", "ham_ptwotwoeightdeploy_post", 1);
	RegisterHam(Ham_Weapon_PrimaryAttack, "weapon_p228", "ham_ptwotwoeightprimaryattack");
	cvar[0] = register_cvar("zp_bazz_d","500")
	gMsgBarTime	= get_user_msgid("BarTime");
}
public plugin_precache()
{
	EXPLODESPRITE	= precache_model("sprites/fexplo.spr");
	SHOCKWAVESPRITE	= precache_model("sprites/shockwave.spr");
	RPGSPRITE	= precache_model("sprites/smoke.spr");
	
	precache_model("models/v_rpg.mdl");
	precache_model("models/p_rpg.mdl");
	precache_model("models/rpgrocket.mdl");
	precache_sound("weapons/rocket1.wav");
	precache_sound("weapons/rocketfire1.wav");
	
//	register_message(78, "msgWeaponList");	//--| WeaponList

}
public zp_fw_items_select_pre(id,i,c)
{
	if(i != Itm_Bazooka)
		return ZP_ITEM_AVAILABLE
	if(zp_core_is_zombie(id))
		return ZP_ITEM_DONT_SHOW;
	new iMap[32]
	get_mapname(iMap, charsmax(iMap))
	if(!equali(iMap, "zm_osprey_escape"))
		return ZP_ITEM_DONT_SHOW;
	static limit, alive, i
	alive = 0;

	for(i=1;i<33;i++)
	{
		if(is_user_alive(i))
		{
			alive++
		}
	}
	switch(alive)
	{
		case 0..21: limit=2
		case 22..26: limit=3
		case 27..32: limit=4
	}
	if(LimitP>=limit)
		return ZP_ITEM_NOT_AVAILABLE
	zp_items_menu_text_add(fmt("[%d/%d]",LimitP,limit))
	if(HasBazooka[id])
		return ZP_ITEM_NOT_AVAILABLE
	if(zp_class_survivor_get(id) || zp_class_knifer_get(id))
		return ZP_ITEM_NOT_AVAILABLE
	return ZP_ITEM_AVAILABLE
}
public zp_fw_items_select_post(id,i,c)
{
	if(i != Itm_Bazooka)
		return
	HasBazooka[id] = 1
	LimitP++
	g_bulletbillalive[id] = 0;
	give_item(id, "weapon_p228");
	engclient_cmd(id, "weapon_p228");
	
}
public client_disconnect(id)
{
	if(HasBazooka[id])
		LimitP--
	HasBazooka[id] = 0
}
public client_death(killer,victim,wpnindex,hitplace,TK)
{
	if(is_user_connected(victim))
	{
		if(HasBazooka[victim])
			LimitP--
		HasBazooka[victim] = 0
	}
}
public zp_fw_core_infect_post(id,att)
{
	if(HasBazooka[id])
		LimitP--
	HasBazooka[id] = 0
}
public zp_fw_gamemodes_end(mod)
{
	LimitP = 0
	for(new id;id < get_maxplayers();id++)
		HasBazooka[id] = 0
}
public msgWeaponList()
{
	static CSW; CSW = get_msg_arg_int(8);

	switch(CSW)
	{
		case CSW_P228:
		{
			set_msg_arg_string(1, WEAPON_RPG);
			set_msg_arg_int(2, ARG_BYTE, -1);
			set_msg_arg_int(3, ARG_BYTE, -1);
			set_msg_arg_int(6, ARG_BYTE, 4);
			set_msg_arg_int(7, ARG_BYTE, 2);
			set_msg_arg_int(9, ARG_BYTE, 24);
		}

	}
}

public ham_ptwotwoeightdeploy_post(rpg)
{
	if(pev_valid(rpg) != 2)
		return HAM_IGNORED;

	static id; id = get_pdata_cbase(rpg, m_pPlayer_Hlds, XO_CBASEPLAYERITEM);

	if(!is_user_alive(id))
		return HAM_IGNORED;
	if(!HasBazooka[id])
		return HAM_IGNORED;
	if(zp_core_is_zombie(id))
		return HAM_IGNORED
	set_pev(id, pev_viewmodel2, "models/v_rpg.mdl");
	set_pev(id, pev_weaponmodel2, "models/p_rpg.mdl");

	set_pdata_int(rpg, m_iClip, -1, XO_CBASEPLAYERWEAPON);
	set_pdata_float(rpg, m_flTimeWeaponIdle_Hlds, 99999.0, XO_CBASEPLAYERWEAPON);
	set_pdata_int(id, m_rgAmmo_CBasePlayer[OFFSET_P228_AMMO], 0, XO_CBASEPLAYER);

	set_pev(id, pev_weaponanim, 5);
	message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, _, id);
	write_byte(5);
	write_byte(0);
	message_end();

	return HAM_IGNORED;
}
public event_CurWeapon(id)
{
	if(!is_user_alive(id))
		return PLUGIN_CONTINUE;
	if(!HasBazooka[id])
		return PLUGIN_CONTINUE;
	if(zp_core_is_zombie(id))
		return PLUGIN_CONTINUE
	new plrClip, plrAmmo, plrWeap[32]
	new plrWeapId
	
	plrWeapId = get_user_weapon(id, plrClip , plrAmmo)
	if(!HasBazooka[id] || plrWeapId != CSW_P228) 
		return PLUGIN_CONTINUE
		
	set_pev(id, pev_viewmodel2, "models/v_rpg.mdl");
	set_pev(id, pev_weaponmodel2, "models/p_rpg.mdl");
	return PLUGIN_HANDLED
}
public ham_ptwotwoeightprimaryattack(rpg)
{
	if(pev_valid(rpg) != 2)
		return HAM_IGNORED;

	set_pdata_float(rpg, m_flNextPrimaryAttack, 1.5, XO_CBASEPLAYERWEAPON);
	static id; id = get_pdata_cbase(rpg, m_pPlayer_Hlds, XO_CBASEPLAYERITEM);
	if(!HasBazooka[id])
		return HAM_IGNORED;
	switch(g_bulletbillalive[id])
	{
		case 0:
		{
			set_pev(id, pev_weaponanim, 3);
			message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, _, id);
			write_byte(3);
			write_byte(0);
			message_end();
			rpg_primaryattack(id);
		}
		case 1:
		{
		set_pdata_float(rpg, m_flNextPrimaryAttack, 9999.0, XO_CBASEPLAYERWEAPON);
		}
	}

	return HAM_SUPERCEDE;
}

public rpg_primaryattack(id)
{
	if(!HasBazooka[id])
		return HAM_IGNORED;
	static bulletbill; bulletbill = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"));
	if(pev_valid(bulletbill))
	{
		g_bulletbillalive[id] = 1;

		set_pev(bulletbill, pev_classname, WEAPON_RPG);
		set_pev(bulletbill, pev_owner, id);
		set_pev(bulletbill, pev_solid, SOLID_BBOX);
		set_pev(bulletbill, pev_movetype, MOVETYPE_FLY);
		set_pev(bulletbill, pev_effects, EF_LIGHT);
		engfunc(EngFunc_SetModel, bulletbill, "models/rpgrocket.mdl");
		engfunc(EngFunc_SetSize, bulletbill, Float:{-2.0, -2.0, -2.0}, Float:{2.0, 2.0, 2.0});

		static origin[3], Float:forigin[3], Float:vec[3], Float:velocity[3];

		get_user_origin(id, origin, 1);
		forigin[0] = float(origin[0]);
		forigin[1] = float(origin[1]);
		forigin[2] = float(origin[2]);

		velocity_by_aim(id, 10, velocity);
		forigin[0] += velocity[0];
		forigin[1] += velocity[1];
		forigin[2] += velocity[2];

		vector_to_angle(velocity, vec);
		set_pev(bulletbill, pev_angles, vec);
		engfunc(EngFunc_SetOrigin, bulletbill, forigin);

		velocity_by_aim(id, 1800, velocity);
		set_pev(bulletbill, pev_velocity, velocity);
		for(new i = 1;i < 33; i++)
		{
			if(!is_user_connected(i))
				continue;
		
			if(zp_fps_get_user_flags(i) & FPS_SPRITES)
				continue;
			message_begin(MSG_ONE_UNRELIABLE,SVC_TEMPENTITY,{0,0,0},i)
			//message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
			write_byte(TE_BEAMFOLLOW);
			write_short(bulletbill);	//--| Entity id
			write_short(RPGSPRITE);		//--| Sprite id
			write_byte(60);			//--| Life
			write_byte(15);			//--| Line Width
			write_byte(224);		//--| Red
			write_byte(224);		//--| Green
			write_byte(255);		//--| Blue
			write_byte(255);		//--| Brightness
			message_end()
		}
		emit_sound(id, CHAN_STATIC, "weapons/rocketfire1.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
		emit_sound(bulletbill, CHAN_STATIC, "weapons/rocket1.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM);

		set_pev(bulletbill, pev_nextthink, get_gametime() + 0.1);
	}
	return HAM_IGNORED;
}
public fwd_rpgbullettouch(bulletbill, touched)
{
	static owner; owner = pev(bulletbill, pev_owner);
	g_bulletbillalive[owner] = 2;

	emit_sound(bulletbill, CHAN_STATIC, "weapons/rocket1.wav", 0.0, ATTN_NONE, SND_STOP, PITCH_NORM);

	if(!is_user_connected(owner))
	{
		set_pev(bulletbill, pev_flags, pev(bulletbill, pev_flags) | FL_KILLME);
		return PLUGIN_HANDLED;
	}

	static Float:origin[3]; pev(bulletbill, pev_origin, origin);

	if(touched == 0)
	{
		static decorigin[3]; FVecIVec(origin, decorigin);

		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_WORLDDECAL);
		write_coord(decorigin[0]);
		write_coord(decorigin[1]);
		write_coord(decorigin[2]);
		write_byte(random_num(46, 48));		//--| DECALS
		message_end();
	}

	set_pev(bulletbill, pev_flags, pev(bulletbill, pev_flags) | FL_KILLME);
	new Float:dmg = get_pcvar_float(cvar[0])
	create_radius_explosion(owner, bulletbill, origin, 200.0, dmg, 0, 1, 1, 0);
	set_task(13.0,"rpg_reload",owner);
	show_progress(owner)
	return PLUGIN_CONTINUE;
}
stock show_progress(id)
{
	if (pev_valid(id))
	{
		engfunc(EngFunc_MessageBegin, MSG_ONE,  gMsgBarTime, {0,0,0}, id);
		write_short(15);
		message_end();
	}
}

//====================================================
// Hide Progress Bar.
//====================================================
stock hide_progress(id)
{
	if (pev_valid(id))
	{
		engfunc(EngFunc_MessageBegin, MSG_ONE, gMsgBarTime, {0,0,0}, id);
		write_short(0);
		message_end();
	}
}

public fwd_rpgbulletthink(rpg)
{
	static id; id = pev(rpg, pev_owner);
	if(is_user_alive(id))
	{
		static Float:aim[3], Float:angles[3], Float:origin[3], Float:normal;

		pev(id, pev_origin, origin);
		pev(id, pev_view_ofs, aim);
		origin[2] += aim[2];

		velocity_by_aim(id, 3072, aim);

		aim[0] += origin[0];
		aim[1] += origin[1];
		aim[2] += origin[2];

		pev(rpg, pev_origin, origin);

		aim[0] -= origin[0];
		aim[1] -= origin[1];
		aim[2] -= origin[2];

		normal = (1.0 / floatsqroot((aim[0] * aim[0]) + (aim[1] * aim[1]) + (aim[2] * aim[2])));
		aim[0] *= normal;
		aim[1] *= normal;
		aim[2] *= normal;

		vector_to_angle(aim, angles);
		set_pev(rpg, pev_angles, angles);

		velocity_by_aim(id, 1650, aim);
		set_pev(rpg, pev_velocity, aim);
	}

	set_pev(rpg, pev_nextthink, get_gametime() + 0.1);
}

public rpg_reload(id)
{
	if(!is_user_connected(id))
		return;
	if(g_bulletbillalive[id] == 2 && is_user_alive(id))
	{
		static rpg;
		rpg = get_pdata_cbase(id, m_rgpPlayerItems_CBasePlayer[2]);

		while(rpg > 0)
		{
			if(get_pdata_int(rpg, m_iId_Hlds, XO_CBASEPLAYERITEM) == CSW_P228)
				break;

			rpg = get_pdata_cbase(rpg, m_pNext_Hlds, XO_CBASEPLAYERITEM);
		}

		if(pev_valid(rpg) == 2)
		{
			set_pdata_float(rpg, m_flNextPrimaryAttack, 1.8, XO_CBASEPLAYERWEAPON);

			if(get_pdata_cbase(id, m_pActiveItem_Hlds) == rpg)
			{
				set_pev(id, pev_weaponanim, 2);
				message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, _, id);
				write_byte(2);
				write_byte(0);
				message_end();
			}

			rg_set_animation(id, PLAYER_RELOAD)
		}

		g_bulletbillalive[id] = 0;
		//client_print(id,print_center,"[ZP] rocket is ready!")
		//hide_progress(id)
	}
}

create_radius_explosion(id, ent, Float:origin[3], Float:radius, Float:damage, rdm = 0, ring = 0, shake = 0, knockback = 0)
{
	static player, players[32], num, Float:vorigin[3], Float:adjdamage, Float:adjdamage2, Float:veclen;
	new Or[3]
	Or[0] = floatround(origin[0])
	Or[1] = floatround(origin[1])
	Or[2] = floatround(origin[2])
	
	for(new i = 1;i < 33; i++)
	{
		if(!is_user_connected(i))
			continue;
		
		if(zp_fps_get_user_flags(i) & FPS_SPRITES)
			continue;
		//engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, origin, 0);
		message_begin(MSG_ONE_UNRELIABLE,SVC_TEMPENTITY,{0,0,0},i)	
		write_byte(TE_EXPLOSION);
		write_coord(Or[0]);			//--| Position.X
		write_coord(Or[1]);			//--| Position.Y
		write_coord(Or[2]);			//--| Position.Z
		write_short(EXPLODESPRITE);				//--| Sprite ID
		write_byte(30);						//--| Scale in 0.1s
		write_byte(15);						//--| Framerate
		write_byte(0);						//--| Flags
		message_end();
	}
	if(ring)
	{
		engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, origin, 0);
		write_byte(TE_BEAMCYLINDER);
		engfunc(EngFunc_WriteCoord, origin[0]);			//--| Position.X
		engfunc(EngFunc_WriteCoord, origin[1]);			//--| Position.Y
		engfunc(EngFunc_WriteCoord, origin[2]);			//--| Position.Z
		engfunc(EngFunc_WriteCoord, origin[0]);			//--| Axis.X
		engfunc(EngFunc_WriteCoord, origin[1]);			//--| Axis.Y
		engfunc(EngFunc_WriteCoord, origin[2] + 500.0);		//--| Axis.Z
		write_short(SHOCKWAVESPRITE);				//--| Sprite ID
		write_byte(0);						//--| Starting Frame
		write_byte(0);						//--| Framerate in 0.1s
		write_byte(8);						//--| Life in 0.1s
		write_byte(30);						//--| Line Width in 0.1s
		write_byte(0);						//--| Noise Amplitude in 0.01s
		write_byte(224);					//--| Red
		write_byte(224);					//--| Green
		write_byte(224);					//--| Blue
		write_byte(255);					//--| Brightness
		write_byte(0);						//--| Scroll Speed
		message_end();
	}

	num = find_sphere_class(ent, PLAYER, radius, players, 32);
	for(--num; num >= 0; num--)
	{
		player = players[num];

		if(!is_user_alive(player))
			continue;
		if(!zp_core_is_zombie(player))
			continue;
		pev(player, pev_origin, vorigin);

		adjdamage = damage - ((damage / radius) * (get_distance_f(origin, vorigin)));
		if(adjdamage <= 0)
			continue;

		if(rdm)
			ExecuteHamB(Ham_TakeDamage, player, ent, id, adjdamage, DMG_BLAST | DMG_MORTAR);
		else
			ExecuteHamB(Ham_TakeDamage, player, ent, id, adjdamage, DMG_GRENADE);
		if(adjdamage > (get_pcvar_float(cvar[0])/3.0) )
			zp_grenade_fire_set(player,true)
		if(shake && is_user_alive(player))
		{
			message_begin(MSG_ONE_UNRELIABLE, 97, _, player);	//--| ScreenShake | All arguments is in special units. 1 second is equal to (1<<12) i.e. 4096 units.
			write_short((1<<12) * 8);				//--| Amplitude
			write_short((1<<12) * 3);				//--| Duration
			write_short((1<<12) * 18);				//--| Frequency
			message_end();
		}

		if(knockback && is_user_alive(player))
		{
			vorigin[0] -= origin[0];
			vorigin[1] -= origin[1];
			vorigin[2] -= origin[2];

			adjdamage2 = 0.7 * adjdamage;
			vorigin[0] *= adjdamage2;
			vorigin[1] *= adjdamage2;
			vorigin[2] *= adjdamage2;

			veclen = damage / floatsqroot((vorigin[0] * vorigin[0]) + (vorigin[1] * vorigin[1]) + (vorigin[2] * vorigin[2]));
			vorigin[0] *= veclen;
			vorigin[1] *= veclen;
			vorigin[2] *= veclen;

			set_pev(player, pev_velocity, vorigin);
		}
	}
}