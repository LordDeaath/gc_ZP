/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <zp50_ammopacks>
#include <zmvip>
#include <colorchat>
#include <unixtime>

#define PLUGIN "Buy VIP"
#define VERSION "1.0"
#define AUTHOR "Lord. Death."

new const DATETIME_FORMAT[ ] = "%Y-%m-%d %H:%M:%S";

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_clcmd("say /buyvip", "MiniVIPInfo");
}

public MiniVIPInfo(id)
{
	new Txt[1024];
	formatex(Txt, 1023, "Mini VIP Info:^n\r. \yAccess to^n\r. \w\
	Fast AP only on infections^n\r. \wthe VIP beacon and tag^n\r. \wthe napalm grenade explosion^n\r.\
	\y2 \wFree weapons from /vsp per map^n\r. \y2 \wMousetraps instead of 1^n\r. \y3 \wSandbags instead of 2^n");
	new Mnu = menu_create(Txt, "pPostVIP");
	menu_additem(Mnu, "\yBuy Mini VIP \r( 05600 AP - 02 Days )");
	menu_additem(Mnu, "\yBuy Mini VIP \r( 30000 AP - 15 Days)");
	menu_additem(Mnu, "\yBuy Mini VIP \r( 50000 AP - 31 Days)");
	menu_display(id, Mnu);
}

public pPostVIP(id, menu, item)
{
	switch (item)
	{
		case 0:
		{
			BuyMini(id, 1);
		}
		case 1:
		{
			BuyMini(id, 2);
		}
		case 2:
		{
			BuyMini(id, 3);
		}
	}
}

public BuyMini(id, iNum)
{
	new Price;
	switch (iNum)
	{
		case 1:
		{
			Price = 5600;
		}
		case 2:
		{
			Price = 30000;
		}
		case 3:
		{
			Price = 50000;
		}
	}
	if ((zv_get_user_flags(id) & ZV_MULTI) || (zv_get_user_flags(id) & ZV_MAIN))
	{
		ColorChat(id, Color:2, "GC |^3 You are a^4 VIP");
		return;
	}
	if (Price > zp_ammopacks_get(id))
	{
		ColorChat(id, Color:2, "GC |^3 You don't have enough^4 AP!");
		return;
	}
	new iAt[34], iNick[32];
	new iYear,iMonth,iDay,iHour,iMinute,iSecond
	new iDat[20],iTxt[256];
	get_user_authid(id, iAt, 33);
	get_user_name(id, iNick, 31);
	replace_all(iNick,charsmax(iNick),"=","")
	get_time(DATETIME_FORMAT, iDat, 20);
	new CurrTime = strtotime(iDat);
	new iExpTime;
	switch (iNum)
	{
		case 1:
		{
			iExpTime = CurrTime + 172800;
		}
		case 2:
		{
			iExpTime = CurrTime + 1296000;
		}
		case 3:
		{
			iExpTime = CurrTime + 2678400;
		}
	}
	UnixToTime(iExpTime, iYear, iMonth, iDay, iHour, iMinute, iSecond, TimeZones:0);	
	formatex(iTxt, charsmax(iTxt), "^n^"%s^" ^"^" ^"bd^" ^"ce^" ;%s (Mini) m%dd%dy%d=h%d", iAt, iNick, iMonth, iDay, iYear, iHour);
	zp_ammopacks_set(id, zp_ammopacks_get(id) - Price);
	zv_set_user_flags(id, 10)
	log_to_file("vip_buy.txt", "%s [%s] Bought Mini VIP [%d]", iNick, iAt, iNum);
	new VIP_File = fopen("addons/amxmodx/configs/vips.ini", "a+");
	fputs(VIP_File, iTxt);
	fclose(VIP_File);
	
}

strtotime( const string[ ] )
{
	new szTemp[ 32 ];
	new szYear[ 5 ], szMonth[ 3 ], szDay[ 3 ], szHour[ 3 ], szMinute[ 3 ], szSecond[ 3 ];
	strtok2( string, szYear,   charsmax( szYear   ), szTemp,   charsmax( szTemp   ), '-' );
	strtok2( szTemp, szMonth,  charsmax( szMonth  ), szTemp,   charsmax( szTemp   ), '-' );
	strtok2( szTemp, szDay,    charsmax( szDay    ), szTemp,   charsmax( szTemp   ), ' ' );
	strtok2( szTemp, szHour,   charsmax( szHour   ), szTemp,   charsmax( szTemp   ), ':' );
	strtok2( szTemp, szMinute, charsmax( szMinute ), szSecond, charsmax( szSecond ), ':' );
	
	return TimeToUnix2( str_to_num( szYear ), str_to_num( szMonth ), str_to_num( szDay ), str_to_num( szHour ), str_to_num( szMinute ), str_to_num( szSecond ) );
}

TimeToUnix2(iYear, iMonth, iDay, iHour, iMinute, iSecond)
{
	new i, iTimeStamp;

	for( i = 1970; i < iYear; i++ )
		iTimeStamp += YearSeconds[ IsLeapYear( i ) ];

	for( i = 1; i < iMonth; i++ )
		iTimeStamp += SecondsInMonth( iYear, i );

	iTimeStamp += ( ( iDay - 1 ) * DaySeconds );
	iTimeStamp += ( iHour * HourSeconds );
	iTimeStamp += ( iMinute * MinuteSeconds );
	iTimeStamp += iSecond;

	return iTimeStamp;
}