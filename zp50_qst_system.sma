/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <sqlx> 
#include <zp50_ammopacks>
#include <zp50_class_nemesis>
#include <zp50_class_nightcrawler>
#include <zp50_class_predator>
#include <colorchat>

#define PLUGIN "Daily Quest"
#define VERSION "1.0"
#define AUTHOR "Lord. Death"

//  Mysql Information
new Host[]     = "74.91.123.158"
new User[]    = "LordD"
new Pass[]     = "jxdPq2SmA0mR"
new Db[]     = "zp_skins"

new Handle:g_SqlTuple
new g_Error[512], iLocalTaken[33]
new iLastQuest[33], iQType[33], iQActiv[33], iQTaken[33], iKills[33], iInfs[33], iBossKills[33]
new bool:Loaded[33]

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_clcmd("qsave","Quest_Apply")
	register_clcmd("say /qst","Quest_Apply")
	register_clcmd("say /quest","Quest_Apply")
	register_clcmd("qlast","qLast")
	set_task(2.0,"MySql_Init") // set a task to activate the mysql_init
}

public MySql_Init()
{
    g_SqlTuple = SQL_MakeDbTuple(Host,User,Pass,Db)
   
    new ErrorCode,Handle:SqlConnection = SQL_Connect(g_SqlTuple,ErrorCode,g_Error,charsmax(g_Error))
    if(SqlConnection == Empty_Handle)
        set_fail_state(g_Error)
       
    new Handle:Queries
    Queries = SQL_PrepareQuery(SqlConnection,"CREATE TABLE IF NOT EXISTS quests_up2 (steamid varchar(32), nick varchar(32),last INT(32), qtype INT(4), qActive INT(4), qTak INT(4), Kills INT(6), Infs INT(6), Boss INT(6) )")

    if(!SQL_Execute(Queries))
    {
        SQL_QueryError(Queries,g_Error,charsmax(g_Error))
        set_fail_state(g_Error)
       
    }
    
    SQL_FreeHandle(Queries)
    SQL_FreeHandle(SqlConnection)   
} 

public plugin_end()
{
	SQL_FreeHandle(g_SqlTuple);    
} 
public client_putinserver(id)
	Load_MySql(id)
public Load_MySql(id)
{
    new szSteamId[32], szTemp[512], iPlayerNick[32]
    get_user_authid(id, szSteamId, charsmax(szSteamId))
    get_user_name(id, iPlayerNick, charsmax(iPlayerNick))

    new Data[1]
    Data[0] = id
    format(szTemp,charsmax(szTemp),"SELECT * FROM `quests_up2` WHERE (`quests_up2`.`steamid` = '%s')", szSteamId)
    SQL_ThreadQuery(g_SqlTuple,"register_client",szTemp,Data,1)
}

public register_client(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
    if(FailState == TQUERY_CONNECT_FAILED)
        log_amx("Load - Could not connect to SQL database.  [%d] %s", Errcode, Error)
    else if(FailState == TQUERY_QUERY_FAILED)
        log_amx("Load Query failed. [%d] %s", Errcode, Error)

    new id
    id = Data[0]
    
    if(SQL_NumResults(Query) < 1) 
    {
        //.if there are no results found
        
        new szSteamId[32], iPlayerNick[32]
        get_user_authid(id, szSteamId, charsmax(szSteamId)) // get user's steamid
        get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
        if (equal(szSteamId,"ID_PENDING"))
            return PLUGIN_HANDLED
            
        new szTemp[512]
        
        // now we will insturt the values into our table.
        format(szTemp,charsmax(szTemp),"INSERT INTO `quests_up2` ( `steamid` , `nick` , `last`, `qtype` , `qActive`, `qTak`, `Kills`, `Infs`, `Boss` ) VALUES ('%s', '%s' ,'0', '0', '0', '0' , '0', '0', '0');", szSteamId, iPlayerNick)
        SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
    } 
    else 
    {
    
        // if there are results found
	if(is_user_connected(id))
	{
		iLastQuest[id] = SQL_ReadResult(Query, 2)
		iQType[id] = SQL_ReadResult(Query, 3)
		iQActiv[id] = SQL_ReadResult(Query, 4)
		iQTaken[id] = SQL_ReadResult(Query, 5)
		iKills[id] = SQL_ReadResult(Query, 6)
		iInfs[id] = SQL_ReadResult(Query, 7)
		iBossKills[id] = SQL_ReadResult(Query, 7)
		Loaded[id]=true;
	}
    }
    
    return PLUGIN_HANDLED
}
public Quest_Apply(id)
{
	if(!Loaded[id])
	{
		client_print(id, print_chat, "Your data didn't load, try again in a bit or reconnect.")
		return
	}
	if(iQActiv[id] == 1)
	{
		switch(iQType[id])
		{
			case 1,2:
			{
				if(qLast(id) > 180 && iQActiv[id])
				{
					iQActiv[id] = 0
					QuestCancel(id)
				}
			}
			case 3,4:
			{
				if(qLast(id) > 300 && iQActiv[id])
				{
					iQActiv[id] = 0
					QuestCancel(id)
				}
			}
			case 5:
			{
				if(qLast(id) > 420 && iQActiv[id])
				{
					iQActiv[id] = 0
					QuestCancel(id)
				}
			}
		}
	}
	if( (qLast(id) > 1440 && !iLocalTaken[id]) || !iQTaken[id])
	{
		Save_MySql(id)
	}
	else qMenu(id)

}
public qMenu(id)
{
	new Txt[64],TxtQ[128], StatsKill[64], StatsInf[64], StatsBossK[64], num
	if(!Loaded[id])
		return
	if(iQActiv[id] == 2)
		formatex(Txt,charsmax(Txt),"Your Quest is \yCompelete")
	else
	if(iQActiv[id] == 1)
	{
		if(qLast(id) < 1)
			num = 0
		else num = qLast(id)
		switch(iQType[id])
		{
			case 1,2: formatex(Txt,charsmax(Txt),"Quest\r Expires \win\y %i Minutes", 180-num)
			case 3,4: formatex(Txt,charsmax(Txt),"Quest\r Expires \win\y %i Minutes", 300-num)
			case 5: formatex(Txt,charsmax(Txt),"Quest\r Expires \win\y %i Minutes", 420-num)
		}
	}
	else formatex(Txt,charsmax(Txt),"Your Quest is \rExpired")
	switch(iQType[id])
	{
		case 1:
		{
			formatex(TxtQ,charsmax(TxtQ),"\wDifficulty: \yVery Easy \r[Reward: 100 AP]")
			formatex(StatsKill,charsmax(StatsKill),"Kill 10 Zombies \r[%d]", iKills[id])
			formatex(StatsInf,charsmax(StatsKill),"Infect 15 Humans \r[%d]", iInfs[id])
			formatex(StatsBossK,charsmax(StatsKill),"Kill 5 Zm Bosses \r[%d]", iBossKills[id])
		}
		case 2:
		{
			formatex(TxtQ,charsmax(TxtQ),"\wDifficulty: \yEasy \r[Reward: 150 AP]")
			formatex(StatsKill,charsmax(StatsKill),"Kill 15 Zombies \r[%d]", iKills[id])
			formatex(StatsInf,charsmax(StatsKill),"Infect 15 Humans \r[%d]", iInfs[id])
			formatex(StatsBossK,charsmax(StatsKill),"Kill 5 Zm Bosses \r[%d]", iBossKills[id])
		}
		case 3:
		{
			formatex(TxtQ,charsmax(TxtQ),"\wDifficulty: \yNormal \r[Reward: 200 AP]")
			formatex(StatsKill,charsmax(StatsKill),"Kill 30 Zombies \r[%d]", iKills[id])
			formatex(StatsInf,charsmax(StatsKill),"Infect 30 Humans \r[%d]", iInfs[id])
			formatex(StatsBossK,charsmax(StatsKill),"Kill 10 Zm Bosses \r[%d]", iBossKills[id])
		}
		case 4:
		{
			formatex(TxtQ,charsmax(TxtQ),"\wDifficulty: \yHard \r[Reward: 300 AP]")
			formatex(StatsKill,charsmax(StatsKill),"Kill 50 Zombies \r[%d]", iKills[id])
			formatex(StatsInf,charsmax(StatsKill),"Infect 50 Humans \r[%d]", iInfs[id])
			formatex(StatsBossK,charsmax(StatsKill),"Kill 15 Zm Bosses \r[%d]", iBossKills[id])
		}
		case 5:
		{
			formatex(TxtQ,charsmax(TxtQ),"\wDifficulty: \yExtreme \r[Reward: 500 AP]")
			formatex(StatsKill,charsmax(StatsKill),"Kill 100 Zombies \r[%d]", iKills[id])
			formatex(StatsInf,charsmax(StatsKill),"Infect 100 Humans \r[%d]", iInfs[id])
			formatex(StatsBossK,charsmax(StatsKill),"Kill 20 Zm Bosses \r[%d]", iBossKills[id])
		}
	}
	new Menu = menu_create(TxtQ,"quest_handle")
	menu_additem(Menu, Txt,"",0)	
	menu_additem(Menu, StatsKill,"",0)
	menu_additem(Menu, StatsInf,"",0)
	menu_additem(Menu, StatsBossK,"",0)
	menu_display(id,Menu)
	
}
public quest_handle(id, menu, item)
{
	if(iQActiv[id] != 1)
		return
	menu_destroy(menu)

	switch(iQType[id])
	{
		case 1:
		{
			if(iKills[id] >= 10 && iInfs[id] >= 15 && iBossKills[id] >= 5)
				Reward(id, 100)
		}
		case 2: 
		{
			if(iKills[id] >= 15 && iInfs[id] >= 15 && iBossKills[id] >= 5)
				Reward(id, 150)
		}
		case 3: 
		{
			if(iKills[id] >= 30 && iInfs[id] >= 30 && iBossKills[id] >= 10)
				Reward(id, 200)
		}	
		case 4: 
		{
			if(iKills[id] >= 50 && iInfs[id] >= 50 && iBossKills[id] >= 15)
				Reward(id, 300)
		}
		case 5: 
		{
			if(iKills[id] >= 100 && iInfs[id] >= 100 && iBossKills[id] >= 20)
				Reward(id, 500)
		}
	}
}
public Reward(id, num)
{
	new Nick[33]
	get_user_name(id, Nick, charsmax(Nick))
	zp_ammopacks_set(id, zp_ammopacks_get(id) + num)
	ColorChat(0, GREEN, "[GC Daily Quests]^3 %s ^1recieved^4 %d Ammopacks^1 for finishing the^4 daily quest", Nick, num)
	EndQuest(id)
}
public Save_MySql(id)
{	
	if(is_user_connected(id)&&Loaded[id])
	{
		new szSteamId[32],iPlayerNick[32], szTemp[512]
		get_user_authid(id, szSteamId, charsmax(szSteamId))
		get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
		new point = get_systime(0)
		new type = random_num(1,5)
		iQType[id] = type
		iQActiv[id] = 1
		iQTaken[id] = 1
		iKills[id] = 0
		iBossKills[id] = 0
		iInfs[id] = 0
		format(szTemp,charsmax(szTemp),"UPDATE `quests_up2` SET `last` = '%i', `qtype` = '%i', `qActive` = '1' , `qTak` = '1', `Kills` = '0', `Infs` = '0', `Boss` = '0' WHERE `quests_up2`.`steamid` = '%s'", point, type, szSteamId)
		SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
		switch(iQType[id])
		{
			case 1: ColorChat(0, GREEN, "[GC Daily Quests]^3 %s ^1recieved^4 an^4 Very Easy Quest^3 [100 AP]",iPlayerNick)
			case 2: ColorChat(0, GREEN, "[GC Daily Quests]^3 %s ^1recieved^4 an^4 Easy Quest^3 [150 AP]",iPlayerNick)
			case 3: ColorChat(0, GREEN, "[GC Daily Quests]^3 %s ^1recieved^4 a^4 Normal Quest^3 [200 AP]",iPlayerNick)
			case 4: ColorChat(0, GREEN, "[GC Daily Quests]^3 %s ^1recieved^4 a^4 Hard Quest^3 [300 AP]",iPlayerNick)
			case 5: ColorChat(0, GREEN, "[GC Daily Quests]^3 %s ^1recieved^4 an^4 Extreme Quest^3 [500 AP]",iPlayerNick)
		}
		iLocalTaken[id] = 1
		qMenu(id)
	}
}
public Save_Stats(id)
{	
	if(is_user_connected(id)&&Loaded[id])
	{
		new szSteamId[34],iPlayerNick[32], szTemp[512]
		get_user_authid(id, szSteamId, charsmax(szSteamId))
		get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
		format(szTemp,charsmax(szTemp),"UPDATE `quests_up2` SET `Kills` = '%i', `Infs` = '%i', `Boss` = '%i' WHERE `quests_up2`.`steamid` = '%s'", iKills[id], iInfs[id], iBossKills[id], szSteamId)
		SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
	}
}
public client_disconnect(id)
	Save_Stats(id)
public QuestCancel(id)
{	
	if(is_user_connected(id)&&Loaded[id])
	{
		new szSteamId[34],iPlayerNick[32], szTemp[512]
		get_user_authid(id, szSteamId, charsmax(szSteamId))
		get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
		format(szTemp,charsmax(szTemp),"UPDATE `quests_up2` SET `qActive` = '0' WHERE `quests_up2`.`steamid` = '%s'", szSteamId)
		SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
		ColorChat(id, GREEN, "[GC Daily Quests]^3 Your quest^4 expired^3 try again in^4 %i minutes", 1440 - qLast(id))
		iQActiv[id] = 0
	}
}
public EndQuest(id)
{	
	if(is_user_connected(id)&&Loaded[id])
	{
		new szSteamId[34],iPlayerNick[32], szTemp[512]
		get_user_authid(id, szSteamId, charsmax(szSteamId))
		get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
		format(szTemp,charsmax(szTemp),"UPDATE `quests_up2` SET `qActive` = '2' WHERE `quests_up2`.`steamid` = '%s'", szSteamId)
		SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
		iQActiv[id] = 2
	}
}
public zp_fw_core_infect_post(id, att)
{
	if(att == id)
		return
	if(!iQActiv[att])
		return
	iInfs[att]++
	Save_Stats(att)
}
public client_death(id,victim,wpnindex,hitplace,TK)
{
	if(victim == id)
		return
	if(!iQActiv[id])
		return
	if(zp_core_is_zombie(victim) && !zp_core_is_zombie(id))
	{
		if(zp_class_nemesis_get(victim) || zp_class_nightcrawler_get(id) || zp_class_predator_get(id))
		{
			iBossKills[id]++
			Save_Stats(id)
		}
		else
		{
			iKills[id]++
			Save_Stats(id)
		}
		
	}
}
		
public qLast(id)
{
	//1 Full day  = 86400
	
	new tTim = get_systime(0)
	new PassedTime
	PassedTime = (tTim - iLastQuest[id]) / 60
	client_print(id, print_console, "%i minutes passed", PassedTime)
	return PassedTime
}
public IgnoreHandle(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
	SQL_FreeHandle(Query)
	return PLUGIN_HANDLED
}