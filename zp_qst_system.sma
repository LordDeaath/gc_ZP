/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <sqlx> 
#include <zp50_gamemodes>
#include <zp50_log>
#include <zombieplague>
#include <colorchat>

#define PLUGIN "Points Bank + Logger"
#define VERSION "1.2"
#define AUTHOR "Lord. Death."

//  Mysql Information
new Host[]     = "74.91.123.158"
new User[]    = "LordD"
new Pass[]     = "jxdPq2SmA0mR"
new Db[]     = "zp_stats"

new Handle:g_SqlTuple
new g_Error[512]
new Saved_Points[33], Quest1[33],Quest2[33],Quest3[33],Quest4[33],Quest5[33],Quest6[33]
new ZomDam[33], HumDam[33], Score[33], Deaths[33], DamageState[33],ScoreState[33], DeathsState[33], MassKillS[33], MassInfS[33]
new Mod[2], IsHuman[33]
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_clcmd("say /challenges", "Counter")
	register_clcmd("say /c", "Counter")
	//register_clcmd("say /load", "Load_MySql")
	//register_clcmd("say /loaded", "load_points")
	
	set_task(2.0,"MySql_Init") // set a task to activate the mysql_init
}
public plugin_natives()
{
	register_native("zp_quest_get", "r_points", 1)
	register_native("zp_quest_count_set", "s_points", 1)
	register_native("zp_quest_limit_set", "s_quest", 1)
	register_native("zp_rc_kill", "Client_MassKill", 1)
	register_native("zp_bomb_inf", "Client_MassInf", 1)
}
public plugin_cfg()
{
	Mod[0] = zp_gamemodes_get_id("Infection Mode")
	Mod[1] = zp_gamemodes_get_id("Multiple Infection Mode")
}
public Counter(id)
	ColorChat(id, GREEN, "[GC]^3 You've compeleted^4 %d Challenges", r_points(id))
public Counter_add(id)
	ColorChat(id, GREEN, "[GC]^3 You've compeleted^4 a challenge!^3 Your current completed challenges are:^4 %d", r_points(id))	
public r_points(id) return Saved_Points[id];
public s_points(id, num) Saved_Points[id] = num;
public s_quest(id, quest, num)
{
	switch(quest)
	{
		case 1: Quest1[id] += num
		case 2: Quest2[id] += num
		case 3: Quest3[id] += num
		case 4: Quest4[id] += num
		case 5: Quest5[id] += num
		case 6: Quest6[id] += num
		default: return;
	}
}
public MySql_Init() 
{
    g_SqlTuple = SQL_MakeDbTuple(Host,User,Pass,Db)
   
    new ErrorCode,Handle:SqlConnection = SQL_Connect(g_SqlTuple,ErrorCode,g_Error,charsmax(g_Error))
    if(SqlConnection == Empty_Handle)
        set_fail_state(g_Error)
       
    new Handle:Queries
    Queries = SQL_PrepareQuery(SqlConnection,"CREATE TABLE IF NOT EXISTS quest_db ( nick varchar(32), steamid varchar(32), count INT(11)\
    , quest_1 INT(11), quest_2 INT(11), quest_3 INT(11), quest_4 INT(11), quest_5 INT(11), quest_6 INT(11) )")

    if(!SQL_Execute(Queries))
    {
        SQL_QueryError(Queries,g_Error,charsmax(g_Error))
        set_fail_state(g_Error)
       
    }
    
    SQL_FreeHandle(Queries)
   
    SQL_FreeHandle(SqlConnection)   
} 

public plugin_end()
{
    SQL_FreeHandle(g_SqlTuple)
} 

public Load_MySql(id)
{
    if(is_user_bot(id))
	return;
    new szSteamId[32], szTemp[512], iPlayerNick[32]
    get_user_authid(id, szSteamId, charsmax(szSteamId))
    get_user_name(id, iPlayerNick, charsmax(iPlayerNick))

    new Data[1]
    Data[0] = id
    new Text[124]
    format(Text, charsmax(Text), "[ %d ] quests Loaded for [ %s ] [ %s ] " , r_points(id) ,iPlayerNick, szSteamId)
    format(szTemp,charsmax(szTemp),"SELECT * FROM `quest_db` WHERE (`steamid` = '%s')", szSteamId)
    SQL_ThreadQuery(g_SqlTuple,"register_client",szTemp,Data,1)
    ZP_PointsLog(Text)
   // client_print(0,print_chat,Text)
}

public register_client(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
    if(FailState == TQUERY_CONNECT_FAILED)
    {
        log_amx("Load - Could not connect to SQL database.  [%d] %s", Errcode, Error)
    }
    else if(FailState == TQUERY_QUERY_FAILED)
    {
        log_amx("Load Query failed. [%d] %s", Errcode, Error)
    }

    new id
    id = Data[0]
    
    if(SQL_NumResults(Query) < 1) 
    {
        //.if there are no results found
        
        new szSteamId[32], iPlayerNick[32]
        get_user_authid(id, szSteamId, charsmax(szSteamId)) // get user's steamid
        get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
        if (equal(szSteamId,"ID_PENDING"))
            return PLUGIN_HANDLED
            
        new szTemp[512]
        
        // now we will insturt the values into our table.
        format(szTemp,charsmax(szTemp),"INSERT INTO `quest_db` ( `nick` , `steamid` , `count` ) VALUES ('%s', '%s' ,'0');", iPlayerNick, szSteamId)
        SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
    } 
    else 
    {
    
        // if there are results found
	Saved_Points[id] = SQL_ReadResult(Query, 2)
	Quest1[id] = SQL_ReadResult(Query, 3)
	Quest2[id] = SQL_ReadResult(Query, 4)
	Quest3[id] = SQL_ReadResult(Query, 5)
	Quest4[id] = SQL_ReadResult(Query, 6)
	Quest5[id] = SQL_ReadResult(Query, 7)
	Quest6[id] = SQL_ReadResult(Query, 8)
        //r_points(id, Saved_Points[id])
    }
    
    return PLUGIN_HANDLED
} 

public Save_MySql(id)
{
    if(is_user_bot(id))
	return;
    new szSteamId[32],iPlayerNick[32], szTemp[512]
    get_user_authid(id, szSteamId, charsmax(szSteamId))
    get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
    new point = r_points(id)
    new Text[124]
    format(Text, charsmax(Text), "[ %d ] Challenges Saved for [ %s ] [ %s ] - C1: [%d] ,C2: [%d] ,C3: [%d] ,C4: [%d] ,C5: [%d] ,C6: [%d] " , point,iPlayerNick, szSteamId, Quest1[id],Quest2[id],Quest3[id],Quest4[id],Quest5[id],Quest6[id])
    format(szTemp,charsmax(szTemp),"UPDATE `quest_db` SET `count` = '%i' , `quest_1` = '%i' , `quest_2` = '%i' , `quest_3` = '%i' , `quest_4` = '%i'\
    , `quest_5` = '%i' , `quest_6` = '%i' , `nick` = '%s' WHERE `steamid` = '%s'", point, Quest1[id],Quest2[id],Quest3[id],Quest4[id],Quest5[id],Quest6[id],iPlayerNick, szSteamId)
    SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
    ZP_PointsLog(Text)
    //client_print(0,print_chat,Text)
} 

public Client_MassKill(id, kills)
{
	new current_mode = zp_gamemodes_get_current()
	if(current_mode != Mod[0] && current_mode != Mod[1])
		return;
	if(kills >= 5 && MassKillS[id] == 2)
	{
		Saved_Points[id]++
		MassKillS[id] = 0
		Save_MySql(id)
		Counter_add(id)
	}
	else if(kills >= 4 && MassKillS[id] == 1)
	{
		Saved_Points[id]++
		MassKillS[id] = 2
		Save_MySql(id)
		Counter_add(id)
	}
	else if(kills >= 3 && MassKillS[id] == 0)
	{
		Saved_Points[id]++
		MassKillS[id] = 1
		Save_MySql(id)
		Counter_add(id)
	}
}

public Client_MassInf(id, kills)
{
	if(kills >= 6 && MassInfS[id] == 0 && Quest1[id] < 3)
	{
		Saved_Points[id]++
		MassInfS[id] = 1
		Quest1[id]++
		Save_MySql(id)
		Counter_add(id)
	}
	else if(kills >= 7 && MassInfS[id] == 1 && Quest2[id] < 3)
	{
		Saved_Points[id]++
		MassInfS[id] = 2
		Quest2[id]++
		Save_MySql(id)
		Counter_add(id)
	}
	else if(kills >= 8 && MassInfS[id] == 2 && Quest3[id] < 3)
	{
		Saved_Points[id]++
		MassInfS[id] = 0
		Quest3[id]++
		Save_MySql(id)
		Counter_add(id)
	}
}

public client_death(att,vic,wpnindex,hitplace,TK)
{
	new current_mode = zp_gamemodes_get_current()
	if (current_mode != Mod[0] && current_mode != Mod[1])
		return;

	if(att == vic || !att || !vic )
		return;
	if(!is_user_connected(att) || !is_user_connected(vic))
		return
		
	Score[att] += 3
	Deaths[vic]++
	
	if(Score[att] >= 200 && !ScoreState[att])
	{
		Saved_Points[att]++
		ScoreState[att] = 1
		Save_MySql(att)
		Counter_add(att)
	}
	else if(Score[att] >= 250 && ScoreState[att] == 1)
	{
		Saved_Points[att]++
		ScoreState[att] = 2
		Save_MySql(att)	
		Counter_add(att)
	}
	else if(Score[att] >= 300 && ScoreState[att] == 2)
	{
		Saved_Points[att]++
		ScoreState[att] = 3
		Save_MySql(att)	
		Counter_add(att)
	}
	else if(Score[att] >= 350 && ScoreState[att] == 3)
	{
		Saved_Points[att]++
		ScoreState[att] = 4
		Save_MySql(att)	
		Counter_add(att)
	}
	else if(Score[att] >= 400 && ScoreState[att] == 4)
	{
		Saved_Points[att]++
		ScoreState[att] = 0
		Score[att] = 0
		Save_MySql(att)	
		Counter_add(att)
	}
	
	if(Deaths[vic] >= 30 && !DeathsState[vic])
	{
		Saved_Points[vic]++
		DeathsState[vic] = 1
		Save_MySql(vic)
		Counter_add(vic)
	}
	else if(Deaths[vic] >= 40 && DeathsState[vic] == 1)
	{
		Saved_Points[vic]++
		DeathsState[vic] = 2
		Save_MySql(vic)	
		Counter_add(vic)
	}
	else if(Deaths[vic] >= 50 && DeathsState[vic] == 2)
	{
		Saved_Points[vic]++
		Deaths[vic] = 0
		DeathsState[vic] = 0
		Save_MySql(vic)	
		Counter_add(vic)
	}

}
public client_damage(att,vic,damage,wpnindex,hitplace,TA)
{
	new current_mode = zp_gamemodes_get_current()
	if (current_mode != Mod[0] && current_mode != Mod[1])
		return;
		
	if(att == vic || !att || !vic )
		return;
	if(!is_user_connected(att) || !is_user_connected(vic))
		return
	if(zp_core_is_zombie(vic) && !zp_core_is_zombie(att) )
	{
		ZomDam[vic] += damage
		HumDam[att] += damage
	}
	
	if(HumDam[att] >= 50000)
	{
		if(HumDam[att] >= 50000 && !DamageState[att])
		{
			DamageState[att] = 1
			Saved_Points[att]++
			Save_MySql(att)
			Counter_add(att)
		}
		if(HumDam[att] >= 75000 && DamageState[att] == 1)
		{
			DamageState[att] = 2
			Saved_Points[att]++
			Save_MySql(att)
			Counter_add(att)
		}
		if(HumDam[att] >= 100000 && DamageState[att] == 2)
		{
			DamageState[att] = 0
			HumDam[att] = 0
			Saved_Points[att]++
			Save_MySql(att)
			Counter_add(att)
		}
	}
	if(ZomDam[vic] >= 20000)
	{
		
		if(Quest4[vic] < 3 &&  ZomDam[vic] >= 20000)
		{
			Saved_Points[vic]++
			Quest4[vic]++
			ZomDam[vic] = 0
			Save_MySql(vic)
			Counter_add(vic)
		}
		if(Quest5[vic] < 3 &&  ZomDam[vic] >= 30000)
		{
			Saved_Points[vic]++
			Quest5[vic]++
			ZomDam[vic] = 0
			Save_MySql(vic)
			Counter_add(vic)
		}
		if(Quest6[vic] < 3 &&  ZomDam[vic] >= 40000)
		{
			Saved_Points[vic]++
			Quest6[vic]++
			ZomDam[vic] = 0
			Save_MySql(vic)
			Counter_add(vic)
		}
	}
}
public client_putinserver(id) Load_MySql(id)
public client_disconnect(id)
{
	Save_MySql(id)
	HumDam[id] = 0
	ZomDam[id] = 0
	IsHuman[id] = 0
}
public zp_fw_core_cure_post(id,a)
	IsHuman[id] = 0
	
public zp_fw_core_infect_post(id, a)
	IsHuman[id] = 0
	
public zp_fw_gamemodes_start(mod)
{
	if (mod != Mod[0] && mod != Mod[1])
		return;	
	for(new id = 1; id <= get_maxplayers(); id++)
	{
		if(!is_user_connected(id))
			continue
		if(zp_core_is_zombie(id))
			continue;
		IsHuman[id] = 1
	}
}
public zp_fw_gamemodes_end()
{
	new id
	for (id = 1; id <= get_maxplayers(); id++)
	{
		if(!is_user_connected(id))
			continue;
		ZomDam[id] = 0
		HumDam[id] = 0
		if(IsHuman[id])
		{
			Saved_Points[id]++
			Save_MySql(id)
		}

	}

}
public IgnoreHandle(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
    SQL_FreeHandle(Query)
    
    return PLUGIN_HANDLED
}
stock ZP_PointsLog(const message_fmt[], any:...)
{
	static message[256], filename[32], date[16];
	vformat(message, charsmax(message), message_fmt, 2);
	format_time(date, charsmax(date), "%Y%m%d");
	formatex(filename, charsmax(filename), "QuestLog_%s.log", date);
	log_to_file(filename, "%s", message);
}
