/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <zp50_gamemodes>
#include <colorchat>
#include <zmvip>
//#include <zp50_extra_log>

#define TEST;
#define PLUGIN "GameMode Votes"
#define VERSION "2.0"
#define AUTHOR "Lord. Death."

#define TASK_ID 100
#define MODE_TASK 200
#define TASK_COUNTDOWN 400
#define TASK_VOTELOOP 500
new gMode_Tag,Wars,Potato,gMode_Nightmare,gMode_Swarm, gMode_Nemesis,gMode_Survivor/*,gMode_Sniper*/, gMode_Armageddon, gMode_Canni,gMode_Plasma;
new gMode_Predator, gMode_Dragon, gMode_Nightcrawler, gMode_Plague, /*gMode_Knifer,*/gMode_Ninja, gMode_SvA, g_NormalID, g_MultiID;
new gVoteText[124], AdminName[32], ModeName[64], SelectedName[32],  gParticipateText[128], gSelectedMode
new gVoteIn[33], gVoteOut[33], gAlreadyVoted[33], iParticipating[33], iTotalParticipations, SelectedPlayer,SelectedPlayer2,SelectedPlayer3;
new gVoteYes[64], gVoteNo[64]
new gYesCount, gNoCount, gSpecialRound, gNextRoundShouldBe
new iCount;
new Trie:g_tAuthIdBlackList // g means global; t means trie
new AuthID[ 35 ]
new bool:gTag, bool:gPotato,bool:gWars, bool:gNightmare,  bool:gNemesis /*,bool:gSniper*/ , bool:gSurvivor , bool:gArmageddon , bool:gPredator, bool:gDragon , bool:gNightcrawler 
new bool:gSwarm , bool:gPlague, bool:gNinja, bool:gCanni, bool:gSvA , bool:gPlasma 
new Closed[33]
new  gMode_Alien,gMode_Race//, gMode_fTag,gMode_Dione, gMode_Winos
new bool:gAlien,bool:gRace//, bool:gfTag,bool:gDione , bool:gWinos
new MenuID;
new const iSound[][] =
{
	"fvox/one",
	"fvox/two",
	"fvox/three",
	"fvox/four",
	"fvox/five",
	"fvox/six",
	"fvox/seven",
	"fvox/eight",
	"fvox/nine",
	"fvox/ten"
}

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	g_tAuthIdBlackList = TrieCreate( ) // Create the trie...	
	register_clcmd("zp_modemenu", "Pre_AdminSelectMode",ADMIN_KICK,"- Opens Special Vote Menu")
	register_clcmd("say /mode", "Pre_AdminSelectMode",ADMIN_KICK,"- Opens Special Vote Menu")
	register_clcmd("say /participate","participate",0,"- Participates you in the next special mode as a boss")
	register_event("HLTV", "Event_NewRound", "a", "1=0", "2=0")
	
	MenuID = register_menuid("Vote: ")
	register_menucmd(MenuID, MENU_KEY_0|MENU_KEY_1|MENU_KEY_2|MENU_KEY_3, "voteCount")
	CheckAlien();	
}

public plugin_end()
{
	TrieDestroy(g_tAuthIdBlackList);
}

public plugin_cfg()
{
	if(!gAlien)
	gMode_Alien  = zp_gamemodes_get_id("Alien Mode")
	gMode_Race = zp_gamemodes_get_id("Nemesis Race Mode")
	gMode_Nightmare = zp_gamemodes_get_id("Nightmare Mode")
	gMode_Tag  = zp_gamemodes_get_id("Zombie Tag Mode")
	Potato = zp_gamemodes_get_id("Hot Potato Mode")
	Wars = zp_gamemodes_get_id("Infection Wars Mode")
	gMode_Nemesis = zp_gamemodes_get_id("Nemesis Mode")
	//gMode_Sniper = zp_gamemodes_get_id("Sniper Mode")
	gMode_Survivor = zp_gamemodes_get_id("Survivor Mode")
	gMode_Armageddon = zp_gamemodes_get_id("Armageddon Mode")
	gMode_Predator = zp_gamemodes_get_id("Predators Mode")
	gMode_Dragon = zp_gamemodes_get_id("Dragon Mode")
	gMode_Nightcrawler = zp_gamemodes_get_id("Nightcrawler Mode")
	gMode_Swarm = zp_gamemodes_get_id("Swarm Mode")
	gMode_Plague = zp_gamemodes_get_id("Plague Mode")
	gMode_Ninja = zp_gamemodes_get_id("Knifer Mode")
	gMode_Canni = zp_gamemodes_get_id("Cannibals Mode")
	gMode_SvA = zp_gamemodes_get_id("Sniper Vs Nemesis")
	gMode_Plasma = zp_gamemodes_get_id("Plasma Mode")	
	g_MultiID = zp_gamemodes_get_id("Multiple Infection Mode")
	g_NormalID = zp_gamemodes_get_id("Infection Mode")
	
	//gMode_Knifer = zp_gamemodes_get_id("Knifer Mode")
//	gMode_Winos = zp_gamemodes_get_id("Winos Mode")	
	//gMode_Dione = zp_gamemodes_get_id("Dione Mode")
	//gMode_fTag  = zp_gamemodes_get_id("Zombie Freezetag Mode")
}

public plugin_natives()
{
	register_native("zp_open_vote_menu","Pre_AdminSelectMode",1)
	register_native("zp_select_participator2","native_select_participator2",1)
	register_native("zp_select_participator3","native_select_participator3",1)
}

new bool:HasAccess[33]

public client_authorized(id, const authid[])
{
	if(equal(authid,"STEAM_0:0:438245230")||equal(authid,"STEAM_0:0:844651"))
	{
		HasAccess[id]=true;
	}
	else
	{
		HasAccess[id]=false;
	}
}

public client_disconnected(id)
{
	iParticipating[id]=0;
}

public participate(id)
{
	get_user_authid(id, AuthID, charsmax(AuthID));
	if( TrieKeyExists( g_tAuthIdBlackList, AuthID ) )
	{
		ColorChat(id,GREEN,"[GC]^1 You were^3 Already Chosen^1 on this map!")
	}
	else
	if(iParticipating[id])
	{
		iParticipating[id]=false;
		ColorChat(id,GREEN,"[GC]^1 You are^3 Not Participating^1 in this special anymore")
	}
	else
	{
		iParticipating[id]=true;
		ColorChat(id,GREEN,"[GC]^1 You are now^3 Participating^1 in this special")
	}
}
public FormatText(id)
{
	//if(!equal(AuthID,"STEAM_0:0:1291169669"))
	//{		
	get_user_name(id, AdminName, charsmax(AdminName))
	//}
	//else
	//{
	//	AdminName = "|DS| Zombie Plague"
	//}
	zp_gamemodes_get_name(gSelectedMode, ModeName, charsmax(ModeName))
	format(gVoteText, charsmax(gVoteText), "\wAdmin \y%s \whas started a vote for \y%s\w", AdminName, ModeName)	
}
public FormatVote(id)
{	
	get_user_authid(id,AuthID,charsmax(AuthID))
	if(gVoteIn[id] == 0 && gVoteOut[id] == 0)
	{
	format(gVoteYes, charsmax(gVoteYes), "Yes \y[%d]", gYesCount)
	format(gVoteNo, charsmax(gVoteNo), "No \y[%d]", gNoCount)
	}
	
	if(gVoteIn[id] == 1)
	{
	format(gVoteYes, charsmax(gVoteYes), "Yes \y[%d] \r(Selected)", gYesCount)
	format(gVoteNo, charsmax(gVoteNo), "No \y[%d]", gNoCount)	
	}
	
	if(gVoteOut[id] == 1) 
	{
	format(gVoteYes, charsmax(gVoteYes), "Yes \y[%d]", gYesCount)
	format(gVoteNo, charsmax(gVoteNo), "No \y[%d] \r(Selected)", gNoCount)	
	}
	if( !TrieKeyExists( g_tAuthIdBlackList, AuthID ) )
	{
		if(iParticipating[id] == 0)
			format(gParticipateText, charsmax(gParticipateText), "Play as the \r%s Special \y[NO]\r^n^n\r   Currently \y%d Players \rparticipating", ModeName, iTotalParticipations)
		else 
			
			format(gParticipateText, charsmax(gParticipateText), "Play as the \y%s Special \r[YES]\r^n^n\r   Currently \y%d Players \rparticipating", ModeName, iTotalParticipations)
	}
	else
		format(gParticipateText, charsmax(gParticipateText), "\dPlay as the %s Special \y[NEXT MAP]\r^n^n\r   Currently \y%d Players \rparticipating", ModeName, iTotalParticipations)
		
}
public Pre_AdminSelectMode(id)
{
	if(!(get_user_flags(id) & ADMIN_KICK)&&!(zv_get_user_flags(id)&ZV_MAIN))
	{
		ColorChat(id, GREEN, "[GC]^3 Special Round Votes^1 can be only started by^3 Admins/Vips^1 and above")
		client_print(id, print_console, "Special Round Votes can be only started by admins/vips and above")
		return PLUGIN_HANDLED;
	}
	
	if(gSpecialRound)
	{
		ColorChat(id, GREEN,"[GC]^1 Next round is voted to be^3 %s.^1 Please try again later", ModeName)
		client_print(id, print_console, " Next round is voted to be %s. Please try again later", ModeName)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_ID))
	{
		 ColorChat(id, GREEN, "[GC]^1 Please wait till the^3 Current Vote^1 ends")
		 client_print(id, print_console , "Please wait till the current vote ends")
		 return PLUGIN_HANDLED;
	}
	
	if(zp_gamemodes_get_current()==ZP_NO_GAME_MODE)
	{
		ColorChat(id, GREEN, "[GC]^1 Please wait until the^3 Round^1 starts!");
		client_print(id, print_console , "Please wait until the round starts")
		return PLUGIN_HANDLED;
	}

	if(zp_gamemodes_get_current() != gMode_Plague &&zp_gamemodes_get_current() !=  gMode_Swarm&&zp_gamemodes_get_current() != g_MultiID && zp_gamemodes_get_current() != g_NormalID)
	{
		if(get_user_flags(id)&ADMIN_LEVEL_A)
		{				
			ColorChat(id, GREEN, "[GC]^3 Warning:^1 You are voting for a^3 Special Round^1 during a^3 Special Round!")
			client_print(id, print_console, "Warning: You are voting for a Special Round during a Special Round!")
		}
		else
		{				
			ColorChat(id, GREEN, "[GC]^1 You can only vote for a^3 Special Round^1 during a^3 Normal Mode!")
			client_print(id, print_console, "You can only vote for a special round during a normal mode!")
			return PLUGIN_HANDLED;
		}
	}	
	
	if(gNextRoundShouldBe<2)
	{
		if(get_user_flags(id)&ADMIN_LEVEL_A)
		{				
			ColorChat(id, GREEN, "[GC]^3 Warning:^1 You are voting for a^3 Special Round^1 before^3 2 Normal Rounds^1 have passed!")
			client_print(id, print_console, "Warning: You are voting for a Special Round before 2 Normal Rounds have passed!")
		}
		else
		{					
			ColorChat(id, GREEN, "[GC]^1 You must wait^3 2 Rounds^1 between specials!")
			client_print(id,print_console, "You must wait 2 rounds between specials!")
			return PLUGIN_HANDLED;
		}
	}
	
	AdminSelectMode(id)
	
	return PLUGIN_HANDLED;
}

public AdminSelectMode(id)
{
	new Menu = menu_create("Select a mode", "SelectedMode")
	if(!gSurvivor)
	menu_additem(Menu, "Survivor Mode")	
	else	
	menu_additem(Menu, "\dSurvivor Mode")
	
	if(!gPlasma)
	menu_additem(Menu, "Plasma Mode")
	else
	menu_additem(Menu, "\dPlasma Mode")
	
	if(!gNinja)
	menu_additem(Menu, "Knifer Mode")
	else
	menu_additem(Menu, "\dKnifer Mode")
	
	if(!gNemesis)
	menu_additem(Menu, "Nemesis Mode")
	else	
	menu_additem(Menu, "\dNemesis Mode")
	
	if(!gDragon)
	menu_additem(Menu, "Dragon Mode")
	else
	menu_additem(Menu, "\dDragon Mode")
	
	if(!gNightcrawler)
	menu_additem(Menu, "NightCrawler Mode")
	else	
	menu_additem(Menu, "\dNightCrawler Mode")	
	
	if(!gPredator)
	menu_additem(Menu, "Predators Mode")
	else	
	menu_additem(Menu, "\dPredators Mode")	
	
	if(!gArmageddon)
	menu_additem(Menu, "Armageddon Mode")
	else
	menu_additem(Menu, "\dArmageddon Mode")
	
	if(!gSvA)
	menu_additem(Menu, "Snipers VS Nemesis")
	else
	menu_additem(Menu, "\dSnipers VS Nemesis")
	
	if(!gNightmare)
	menu_additem(Menu, "Nightmare Mode")
	else
	menu_additem(Menu, "\dNightmare Mode")
	
	if(!gCanni)
	menu_additem(Menu, "Cannibals Mode")
	else
	menu_additem(Menu, "\dCannibals Mode")
	
	if(!gTag)
	menu_additem(Menu, "Zombie Tag")
	else	
	menu_additem(Menu, "\dZombie Tag")		

	if(!gPotato)
	menu_additem(Menu, "Hot Potato")
	else	
	menu_additem(Menu, "\dHot Potato")	

	if(!gWars)
	menu_additem(Menu, "Infection Wars")
	else	
	menu_additem(Menu, "\dInfection Wars")	

	if(!gRace)
	menu_additem(Menu, "Nemesis Race Mode")
	else
	menu_additem(Menu, "\dNemesis Race Mode")
	#if defined TEST		
	if(has_all_flags(id, "abf")||HasAccess[id])
	{
	#endif
		
		if(!gAlien)
		menu_additem(Menu, "Alien Mode")
		else
		menu_additem(Menu, "\dAlien Mode\r (Incompatible Map)")		
	#if defined TEST
	}
	#endif
	/*if(!gSniper)
	menu_additem(Menu, "Sniper Mode")
	else
	menu_additem(Menu, "\dSniper Mode")*/
	/*if(!gSwarm)
	menu_additem(Menu, "Swarm Mode")
	else	
	menu_additem(Menu, "\dSwarm Mode")	
	if(!gPlague)
	menu_additem(Menu, "Plague Mode")
	else
	menu_additem(Menu, "\dPlague Mode")*/
	/*if(!gfTag)
	menu_additem(Menu, "Zombie Freezetag")
	else	
	menu_additem(Menu, "\dZombie Freezetag")*/
	/*if(!gWinos)
	menu_additem(Menu, "Winos Mode")
	else
	menu_additem(Menu, "\dWinos Mode")*/
	/*if(!gDione)
	menu_additem(Menu, "Dione Mode")
	else	
	menu_additem(Menu, "\dDione Mode")*/
	menu_setprop( Menu, MPROP_EXIT, MEXIT_ALL );
	menu_display( id, Menu, 0 );

}

public SelectedMode(id, menu, item)
{
	if(!(get_user_flags(id) & ADMIN_KICK)&&!(zv_get_user_flags(id)&ZV_MAIN))
	{
		ColorChat(id, GREEN, "[GC]^1 Special Round Votes^1 can be only started by^3 Admins/VIPS^1 and above")
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	
	if(gSpecialRound)
	{
		ColorChat(id, GREEN,"[GC]^1 Next round is voted to be^3 %s.^1 Please try again later", ModeName)
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_ID))
	{
		 ColorChat(id, GREEN, "[GC]^1 Please wait till the^3 Current Vote^1 ends")
		 menu_destroy(menu)
		 return PLUGIN_HANDLED;
	}

	if(zp_gamemodes_get_current()==ZP_NO_GAME_MODE)
	{
		ColorChat(id, GREEN, "[GC]^1 Please wait until the^3 Round^1 starts!");
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}

	if(!(get_user_flags(id)&ADMIN_LEVEL_A))
	{
		if(zp_gamemodes_get_current() != gMode_Plague &&zp_gamemodes_get_current() !=  gMode_Swarm&&zp_gamemodes_get_current() != g_MultiID && zp_gamemodes_get_current() != g_NormalID)
		{
			ColorChat(id, GREEN, "[GC]^1 You can only vote for a^3 Special Round^1 during a^3 Normal Mode!")
			menu_destroy(menu)
			return PLUGIN_HANDLED;
		}
				
		if(gNextRoundShouldBe<2)
		{
			ColorChat(id, GREEN, "[GC]^1 You must wait^3 2 Rounds^1 between specials!")
			menu_destroy(menu)
			return PLUGIN_HANDLED;
		}
	}	
	
	switch( item )
	{
		case 0:
		{
			if(!gSurvivor)
			{
				gSurvivor=true;
				gSelectedMode = gMode_Survivor
				FormatPreText(id)				
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 1:
		{
			if(!gPlasma)
			{
				gPlasma=true;
				gSelectedMode = gMode_Plasma
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}	
		case 2:
		{
			if(!gNinja)
			{
				gNinja=true;
				gSelectedMode = gMode_Ninja
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}	
		case 3:
		{
			if(!gNemesis)
			{
				gNemesis=true;
				gSelectedMode = gMode_Nemesis
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 4:
		{
			if(!gDragon)
			{
				gDragon=true;
				gSelectedMode = gMode_Dragon
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 5:
		{
			if(!gNightcrawler)
			{
				gNightcrawler=true;
				gSelectedMode = gMode_Nightcrawler
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}				
		}
		case 6:
		{
			if(!gPredator)
			{
				gPredator=true;
				gSelectedMode = gMode_Predator
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 7:
		{
			if(!gArmageddon)
			{
				gArmageddon=true;
				gSelectedMode = gMode_Armageddon
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 8:
		{
			if(!gSvA)
			{
				gSvA=true;
				gSelectedMode = gMode_SvA
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 9:
		{			
			if(!gNightmare)
			{
				gNightmare=true;
				gSelectedMode = gMode_Nightmare
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 10:
		{
			if(!gCanni)
			{
				gCanni=true;
				gSelectedMode = gMode_Canni
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}	
		case 11:
		{
			if(!gTag)
			{
				gTag=true;
				gSelectedMode = gMode_Tag
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}				
		}	
		case 12:
		{
			if(!gPotato)
			{
				gPotato=true;
				gSelectedMode = Potato
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}				
		}	
		case 13:
		{
			if(!gWars)
			{
				gWars=true;
				gSelectedMode = Wars
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}				
		}	
		case 14:
		{
			if(!gRace)
			{
				gRace=true;
				gSelectedMode = gMode_Race
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 15:
		{
			if(has_all_flags(id, "abf")||HasAccess[id])
			{
				if(!gAlien)
				{
					gAlien=true;
					gSelectedMode = gMode_Alien
					FormatPreText(id)
				}
				else
				{
					ColorChat(id,GREEN,"[GC]^1 This ^3Special^1 is ^3Not Compatible^1 with this^3 Map!")
				}
			}		
		}	/*			
		case 17:
		{			
			if(!gDione)
			{
				gDione=true;
				gSelectedMode = gMode_Dione
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}*//*
		case 13:
		{
			if(!gWinos)
			{
				gWinos=true;
				gSelectedMode = gMode_Winos
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}*/
		/*case 10:
		{
			if(!gfTag)
			{
				gfTag=true;
				gSelectedMode = gMode_fTag
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}				
		}*/
		/*case 1:
		{
			if(!gSniper)
			{
				gSniper=true;
				gSelectedMode = gMode_Sniper
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}*/
		/*case 6:
		{
			if(!gSwarm)
			{
				gSwarm=true;
				gSelectedMode = gMode_Swarm
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}
		case 7:
		{
			if(!gPlague)
			{
				gPlague=true;
				gSelectedMode = gMode_Plague
				FormatPreText(id)
			}
			else
			{
				ColorChat(id,GREEN,"[GC]^1 A^3 Vote^1 has already been made for this^3 Special^1 on this^3 Map!")
			}
		}*/
	}	
	menu_destroy(menu)
	return PLUGIN_HANDLED;
}

public FormatPreText(id)
{
	FormatText(id) //Let's format the vote text
	new iPlayer
	for (iPlayer = 1; iPlayer <= 32; iPlayer++)	
	{
		if(is_user_connected(iPlayer))
		{
			gVoteIn[iPlayer] = 0
			gVoteOut[iPlayer] = 0
			gAlreadyVoted[iPlayer] = 0
			iParticipating[iPlayer] = 0
			Closed[id]=false;
			VoteMenu(iPlayer+TASK_VOTELOOP)
			set_task(1.0,"VoteMenu",iPlayer+TASK_VOTELOOP,_,_,"a",14)
		}
	}
	set_task(15.0,"EndVote", TASK_ID)
}

public VoteMenu(id)
{
	id-=TASK_VOTELOOP
	
	FormatVote(id)	
	new menu_msg[512]
	new keys = MENU_KEY_0 | MENU_KEY_1 | MENU_KEY_2
	new len=formatex(menu_msg, charsmax(menu_msg), "%s^n^n\r1.\w %s^n^n\r2.\w %s^n^n",gVoteText,gVoteYes,gVoteNo)
	
	if(gSelectedMode == gMode_Nemesis || gSelectedMode == gMode_Dragon || gSelectedMode == gMode_Nightcrawler || gSelectedMode == gMode_Predator || gSelectedMode == gMode_Survivor || gSelectedMode == gMode_Plasma|| gSelectedMode == gMode_Ninja)//|| gSelectedMode == gMode_Winos ||gSelectedMode == gMode_Dione )
	{
		len+=formatex(menu_msg[len], charsmax(menu_msg) - len ,"\r3.\w %s^n^n",gParticipateText);
		keys |= MENU_KEY_3
		
	}
	
	len+=formatex(menu_msg[len], charsmax(menu_msg) - len ,"\r0.\w Exit");
	if(NotInMenu(id)&&!Closed[id])
	{
		show_menu(id,keys, menu_msg,  1, "Vote: ")
	}
	
}

stock NotInMenu(id)
{
	new menuid, keys
	get_user_menu(id, menuid, keys);
	return (menuid==0||menuid==MenuID)
}


public EndVote()
{
	if(gYesCount > 2 * gNoCount)
	{
		ColorChat(0, GREEN, "[GC]^1 Vote success with^3 %d^1 votes for ^3Yes", gYesCount)
		ColorChat(0, GREEN, "[GC]^1 Next round is^3 %s", ModeName)
		gSpecialRound = 1
	}
	else 
	{
		ColorChat(0, GREEN, "[GC]^1 Vote failed with^3 %d^1 votes for ^3No", gNoCount)	
		gSelectedMode=0
		gSpecialRound = 0
	}
	
	gYesCount = 0
	gNoCount = 0
	iTotalParticipations = 0
		
}
public zp_fw_gamemodes_end()
{
	if(task_exists(TASK_ID))
	{
		EndVote()
		remove_task(TASK_ID)
		for(new id=1;id<33;id++)
		{
			if(task_exists(id+TASK_VOTELOOP))
				remove_task(id+TASK_VOTELOOP);
		}
	}
}
public voteCount(id, key)
{
	switch(key)
	{		
		case 0:
		{
			if(task_exists(TASK_ID))
			{
				if(gAlreadyVoted[id] == 0)
				{
					gYesCount++
					gVoteIn[id] = 1 
					gAlreadyVoted[id] = 1
					VoteMenu(id+TASK_VOTELOOP)
				}
				else
				{
					if(gVoteOut[id] == 1)
					{
						gYesCount++
						gNoCount--
						gVoteOut[id] = 0
						gVoteIn[id] = 1 		
					}
					VoteMenu(id+TASK_VOTELOOP)
				}
			}
		}
		case 1:
		{
			if(task_exists(TASK_ID))
			{
				if(gAlreadyVoted[id] == 0)
				{
					gNoCount++
					gVoteOut[id] = 1
					gAlreadyVoted[id] = 1
					VoteMenu(id+TASK_VOTELOOP)
				}
				else
				{
					if(gVoteIn[id] == 1)
					{
						gYesCount--
						gNoCount++
						gVoteOut[id] = 1
						gVoteIn[id] = 0
					}
					VoteMenu(id+TASK_VOTELOOP)
				}
			}
		}
		case 2:
		{
			if(/*gSelectedMode == gMode_Sniper || */gSelectedMode == gMode_Nemesis || gSelectedMode == gMode_Dragon || gSelectedMode == gMode_Nightcrawler || gSelectedMode == gMode_Predator || gSelectedMode == gMode_Survivor || gSelectedMode == gMode_Plasma|| gSelectedMode == gMode_Ninja)//|| gSelectedMode == gMode_Winos ||gSelectedMode == gMode_Dione )
			{
				get_user_authid(id, AuthID, charsmax(AuthID))
				if( !TrieKeyExists( g_tAuthIdBlackList, AuthID ) )
				{
					if(iParticipating[id] == 0)
					{
						iParticipating[id] = 1
						ColorChat(id, GREEN, "[GC]^1 You are^3 Now Participating^1 as a^3 Special Boss!")
						iTotalParticipations++
					}
					else
					{
						iParticipating[id] = 0
						ColorChat(id, GREEN, "[GC]^1 You are^3 No Longer Participating^1 as a^3 Special Boss!")
						iTotalParticipations--
					}
				}
				else
					ColorChat(id, GREEN, "[GC]^1 You've been selected as a ^3Special Boss^1 once. Try again later")
				if(task_exists(TASK_ID))
					VoteMenu(id+TASK_VOTELOOP)
			}
			else
			{
				if(task_exists(id+TASK_VOTELOOP))
					remove_task(id+TASK_VOTELOOP)
				Closed[id]=true;
			}
			
		}
		case 9:
		{
			if(task_exists(id+TASK_VOTELOOP))
				remove_task(id+TASK_VOTELOOP)
			Closed[id]=true;
		}
	}
	return PLUGIN_HANDLED;
}

public StartMode()
{
	if(GetPlayerCount()<2)
	{			
		zp_gamemodes_start(0);
	}
	else if(SelectedPlayer)
	{
		if(is_user_alive(SelectedPlayer))
		{			
			if(!zp_gamemodes_start(gSelectedMode, SelectedPlayer))
			{
				zp_gamemodes_start(0);
			}
			else
			{				
				get_user_name(SelectedPlayer, SelectedName, charsmax(SelectedName))
				get_user_authid(SelectedPlayer, AuthID, charsmax(AuthID))
				TrieSetCell( g_tAuthIdBlackList, AuthID, 1 )
				ColorChat(0, GREEN, "[GC]^1 Player: ^3%s^1 is selected as a ^3Special Boss!", SelectedName)
			}			
		}
		else
		{
			SelectParticipator()
			if(is_user_alive(SelectedPlayer))
			{				
				if(!zp_gamemodes_start(gSelectedMode, SelectedPlayer))
				{
					zp_gamemodes_start(0)
				}
				else if(SelectedPlayer)
				{							
					get_user_name(SelectedPlayer, SelectedName, charsmax(SelectedName))
					get_user_authid(SelectedPlayer, AuthID, charsmax(AuthID))
					TrieSetCell( g_tAuthIdBlackList, AuthID, 1 )
					ColorChat(0, GREEN, "[GC]^1 Player: ^3%s^1 is selected as a^3 Special Boss!", SelectedName)	
				}	
			}
			else
			{
				if(!zp_gamemodes_start(gSelectedMode))
				{
					zp_gamemodes_start(0)
				}
			}
		}
		if(SelectedPlayer2 != 0&&GetAliveCount()>=12)
		{
			if(is_user_alive(SelectedPlayer2))
			{
				get_user_name(SelectedPlayer2, SelectedName, charsmax(SelectedName))
				get_user_authid(SelectedPlayer2, AuthID, charsmax(AuthID))
				TrieSetCell( g_tAuthIdBlackList, AuthID, 1 )
				ColorChat(0, GREEN, "[GC]^1 Player: ^3%s^1 is selected as a^3 2nd Special Boss!", SelectedName)
			}
			if(SelectedPlayer3 !=0&&GetAliveCount()>=24)
			{
				if(is_user_alive(SelectedPlayer3))
				{
					get_user_name(SelectedPlayer3, SelectedName, charsmax(SelectedName))
					get_user_authid(SelectedPlayer3, AuthID, charsmax(AuthID))
					TrieSetCell( g_tAuthIdBlackList, AuthID, 1 )
					ColorChat(0, GREEN, "[GC]^1 Player:^3 %s^1 is selected as a^3 3rd Special Boss!", SelectedName)	
				}
			}
		}
	}
	else if(!zp_gamemodes_start(gSelectedMode))
	{
		zp_gamemodes_start(0);
	}
	
	SelectedPlayer = 0		
	SelectedPlayer2 = 0		
	SelectedPlayer3 = 0
}

public CountDown()
{
	if(iCount > 0)
	{
		iCount--
		zp_gamemodes_get_name(gSelectedMode, ModeName, charsmax(ModeName))
		set_hudmessage(255, 0, 0, -1.0, 0.2, 0, 1.0, 0.5, 0.2, 0.8, -1)
		show_hudmessage(0, "=| %s starts in %d |=", ModeName, iCount+1)
		set_task(1.0,"CountDown",TASK_COUNTDOWN)
		client_cmd(0, "spk ^"sound/%s^"", iSound[iCount])
	}
	else
		iCount = 10;
}

public SelectParticipator()
{
	if(/*gSelectedMode == gMode_Sniper || */gSelectedMode == gMode_Ninja ||gSelectedMode == gMode_Nemesis  || gSelectedMode == gMode_Dragon || gSelectedMode == gMode_Nightcrawler || gSelectedMode == gMode_Predator || gSelectedMode == gMode_Survivor || gSelectedMode == gMode_Plasma)//||gSelectedMode == gMode_Dione||gSelectedMode== gMode_Winos
	{				
		//Randomize without repetition
		new random_array[33];
		
		for(new i=1; i < 33; i++)
			random_array[i] = i;
		
		new randIndex, tmp;
		for(new i=1; i < 33; i++)
		{
			randIndex = random_num(1,32);
			tmp = random_array[i];
			random_array[i] = random_array[randIndex];
			random_array[randIndex] = tmp;
		}
		
		if(gSelectedMode == gMode_Predator)
		{				
			for(new i=1; i < 33 && (SelectedPlayer==0 || SelectedPlayer2==0 || SelectedPlayer3==0);i++)
			{
				if(is_user_connected(random_array[i])&&iParticipating[random_array[i]])
				{
					if(SelectedPlayer==0)
						SelectedPlayer = random_array[i];
					else
					if(SelectedPlayer2==0)
						SelectedPlayer2 = random_array[i];
					else
					if(SelectedPlayer3==0)
						SelectedPlayer3 = random_array[i];
				}
			}
			
			if(SelectedPlayer3==0)
			{
				for(new i=1; i < 33 && (SelectedPlayer==0 || SelectedPlayer2==0 || SelectedPlayer3==0);i++)
				{
					if(is_user_connected(random_array[i])&&i!=SelectedPlayer&&i!=SelectedPlayer2&&i!=SelectedPlayer3)
					{
						if(SelectedPlayer3==0)
							SelectedPlayer3 = random_array[i];
						else
						if(SelectedPlayer2==0)
							SelectedPlayer2 = random_array[i];
						else
						if(SelectedPlayer ==0)
							SelectedPlayer = random_array[i];
					}
				}
			}	
			
			new players_alive= GetAliveCount();
			if(is_user_alive(SelectedPlayer))
			{				
				ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
				ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
				ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
				ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
				ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
			}
			
			if (players_alive >= 12)
			{					
				if(is_user_alive(SelectedPlayer2))
				{
					ColorChat(SelectedPlayer2, GREEN, "[GC]^1 You've been selected as the^3 2nd Special Boss^1 for this round!^3 Prepare Yourself!")
					ColorChat(SelectedPlayer2, GREEN, "[GC]^1 You've been selected as the^3 2nd Special Boss^1 for this round!^3 Prepare Yourself!")
					ColorChat(SelectedPlayer2, GREEN, "[GC]^1 You've been selected as the^3 2nd Special Boss^1 for this round!^3 Prepare Yourself!")
					ColorChat(SelectedPlayer2, GREEN, "[GC]^1 You've been selected as the^3 2nd Special Boss^1 for this round!^3 Prepare Yourself!")
					ColorChat(SelectedPlayer2, GREEN, "[GC]^1 You've been selected as the^3 2nd Special Boss^1 for this round!^3 Prepare Yourself!")
				}		
			}
			if (players_alive >= 24)
			{		
				if(is_user_alive(SelectedPlayer3))
				{
					ColorChat(SelectedPlayer3, GREEN, "[GC]^1 You've been selected as the^3 3rd Special Boss^1 for this round!^3 Prepare Yourself!")
					ColorChat(SelectedPlayer3, GREEN, "[GC]^1 You've been selected as the^3 3rd Special Boss^1 for this round!^3 Prepare Yourself!")
					ColorChat(SelectedPlayer3, GREEN, "[GC]^1 You've been selected as the^3 3rd Special Boss^1 for this round!^3 Prepare Yourself!")
					ColorChat(SelectedPlayer3, GREEN, "[GC]^1 You've been selected as the^3 3rd Special Boss^1 for this round!^3 Prepare Yourself!")
					ColorChat(SelectedPlayer3, GREEN, "[GC]^1 You've been selected as the^3 3rd Special Boss^1 for this round!^3 Prepare Yourself!")
				}						
			}
		}
		else
		{
			SelectedPlayer2 = 0;
			SelectedPlayer3 = 0;
			for(new i=1; i < 33 && SelectedPlayer==0;i++)
			{
				if(is_user_connected(random_array[i])&&iParticipating[random_array[i]])
				{
					SelectedPlayer = random_array[i];
				}
			}
			
			if(SelectedPlayer==0)
			{
				for(new i=1; i < 33 && SelectedPlayer==0;i++)
				{
					if(is_user_connected(random_array[i]))
						SelectedPlayer = random_array[i];
				}
			}				
			ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
			ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
			ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
			ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
			ColorChat(SelectedPlayer, GREEN, "[GC]^1 You've been selected as the^3 Special Boss^1 for this round!^3 Prepare Yourself!")
		}		
	}
	else
	{
		SelectedPlayer = 0;
		SelectedPlayer2 = 0;
		SelectedPlayer3 = 0;
	}
}

public Event_NewRound()
{	
	if(task_exists(MODE_TASK))
	{
		remove_task(MODE_TASK)
	}
	
	if(task_exists(TASK_COUNTDOWN))
	{
		remove_task(TASK_COUNTDOWN);
	}
	
	if(task_exists(TASK_ID))
	{
		remove_task(TASK_ID);
	}
	
	iCount=10;
	set_task(0.5,"CountDown",TASK_COUNTDOWN);
	
	if(GetPlayerCount()<2)
	{
		gSelectedMode=zp_gamemodes_get_default();
		zp_gamemodes_get_name(gSelectedMode, ModeName, charsmax(ModeName))
		ColorChat(0, GREEN, "[GC]^1 Starting ^3[%s]^1 in 10 Seconds", ModeName)
		set_task(10.5, "StartMode", MODE_TASK)
		gNextRoundShouldBe++
	}
	else
	if(gSpecialRound == 1)
	{		
		zp_gamemodes_get_name(gSelectedMode, ModeName, charsmax(ModeName))
		ColorChat(0, GREEN, "[GC]^1 Starting ^3[%s]^1 Voted by ^3%s^1 in 10 Seconds", ModeName, AdminName)
		SelectParticipator()
		set_task(10.5, "StartMode", MODE_TASK)
	}
	else 
	{
		if(GetPlayerCount()<15||(gSurvivor/*&&gSniper*/&&gNinja&&gPlasma&&gNightmare&&gPotato&&gWars&&gTag&&gNemesis&&gArmageddon&&gPredator&&gDragon&&gNightcrawler&&gCanni&&gSvA))
		{
			new iRandom = random(10)	

			if(iRandom)
			{
				gSelectedMode=g_NormalID
			}
			else
			{
				gSelectedMode=g_MultiID
			}		
			
			zp_gamemodes_get_name(gSelectedMode, ModeName, charsmax(ModeName))
			ColorChat(0, GREEN, "[GC]^1 Starting^3 [%s]^1 in 10 Seconds", ModeName)
			set_task(10.5, "StartMode", MODE_TASK)
			gNextRoundShouldBe++
		}
		else
		if(gNextRoundShouldBe >= 4)
		{			
			new iRandom
			while((iRandom = random(14))>-1)
			{		
				if(iRandom==0)
				{
					if(gNightmare)
						continue
					
					gSelectedMode=gMode_Nightmare
					break;
				}				
				if(iRandom==1)
				{
					if(gTag)
						continue
					
					gSelectedMode=gMode_Tag
					break;
				}				
				if(iRandom==2)
				{
					if(gNemesis)
						continue
					
					gSelectedMode=gMode_Nemesis
					break;
				}		
				if(iRandom==3)
				{
					if(gArmageddon)
						continue
					
					gSelectedMode=gMode_Armageddon
					break;
				}						
				if(iRandom==4)
				{
					if(gPredator)
						continue
					
					gSelectedMode=gMode_Predator
					break;
				}					
				if(iRandom==5)
				{
					if(gDragon)
						continue
					
					gSelectedMode=gMode_Dragon
					break;
				}				
				if(iRandom==6)
				{
					if(gNightcrawler)
						continue
					
					gSelectedMode=gMode_Nightcrawler
					break;
				}		
				if(iRandom==7)
				{
					if(gCanni)
						continue
					
					gSelectedMode=gMode_Canni
					break;
				}		
				if(iRandom==8)
				{
					if(gSvA)
						continue
					
					gSelectedMode=gMode_SvA
					break;
				}	
				if(iRandom==9)
				{
					if(gSurvivor)
						continue
					
					gSelectedMode=gMode_Survivor
					break;
				}/*		
				if(iRandom==10)
				{
					if(gSniper)
						continue
					
					gSelectedMode=gMode_Sniper
					break;
				}*/	
				if(iRandom==10)
				{
					if(gPlasma)
						continue
					
					gSelectedMode=gMode_Plasma
					break;
				}		
				if(iRandom==11)
				{
					if(gNinja)
						continue
					
					gSelectedMode=gMode_Ninja
					break;
				}	
				if(iRandom==12)
				{
					if(gPotato)
						continue
					
					gSelectedMode=Potato
					break;
				}		
				if(iRandom==13)
				{
					if(gWars)
						continue
					
					gSelectedMode=Wars
					break;
				}				
			}
						
			zp_gamemodes_get_name(gSelectedMode, ModeName, charsmax(ModeName))
			ColorChat(0, GREEN, "[GC]^1 Starting^3 [%s]^1 in 10 Seconds", ModeName)
			set_task(10.5, "StartMode", MODE_TASK)
		}
		else
		{			
			new iRandom
			while((iRandom = random(40))>-1)
			{					
				if(iRandom<30)
				{
					gSelectedMode=g_NormalID
					break;
				}
				
				if(iRandom<34)
				{
					gSelectedMode=g_MultiID
					break;
				}	
				
				if(iRandom<37)
				{
					if(gPlague)
						continue
					
					gSelectedMode=gMode_Plague
					break;
				}
				
				if(iRandom<40)
				{
					if(gSwarm)
						continue
					
					gSelectedMode=gMode_Swarm
					break;
				}
			}
			
			gNextRoundShouldBe++
			zp_gamemodes_get_name(gSelectedMode, ModeName, charsmax(ModeName))
			ColorChat(0, GREEN, "[GC]^1 Starting^3 [%s]^1 in 10 Seconds", ModeName)
			ColorChat(0, GREEN, "[GC]^3 [%d Round%s Left]^1 for a Random Mode", 5 - gNextRoundShouldBe,(5 - gNextRoundShouldBe)!=1?"s":"")
			set_task(10.5, "StartMode", MODE_TASK)
		}
	}
}

public zp_fw_gamemodes_start(id)
{
	if(task_exists(MODE_TASK))
	{
		remove_task(MODE_TASK)
	}

	if(task_exists(TASK_COUNTDOWN))
	{
		remove_task(TASK_COUNTDOWN);
	}
	
	if(task_exists(TASK_ID))
	{
		remove_task(TASK_ID);
	}
	
	if(id!=g_NormalID&&id!=g_MultiID)
	{
		if(id==gMode_Survivor)
		{
			gNextRoundShouldBe=0;
			gSurvivor=true
		}/*
		else
		if(id==gMode_Sniper)
		{		
			gNextRoundShouldBe=0;	
			gSniper=true;
		}*/
		else
		if(id==gMode_Nemesis)
		{
			gNextRoundShouldBe=0;
			gNemesis=true;
		}
		else
		if(id==gMode_Nightcrawler)
		{
			gNextRoundShouldBe=0;
			gNightcrawler=true;
		}
		else
		if(id==gMode_Dragon)
		{
			gNextRoundShouldBe=0;
			gDragon=true;
		}
		else
		if(id==gMode_Predator)
		{
			gNextRoundShouldBe=0;
			gPredator=true;
		}
		else
		if(id==gMode_Swarm)
		{
			gSwarm=true;
			gPlague=true;
		}
		else
		if(id==gMode_Plague)
		{
			gPlague=true;
			gSwarm=true;
		}
		else
		if(id==gMode_Armageddon)
		{
			gNextRoundShouldBe=0;
			gArmageddon=true;
		}
		else
		if(id==gMode_Tag)
		{
			gNextRoundShouldBe=0;
			gTag=true;
		}
		else
		if(id==Wars)
		{
			gNextRoundShouldBe=0;
			gWars=true;
		}
		else
		if(id==Potato)
		{
			gNextRoundShouldBe=0;
			gPotato=true;
		}
		else
		if(id==gMode_SvA)
		{
			gNextRoundShouldBe=0;
			gSvA=true;
		}
		else
		if(id==gMode_Canni)
		{
			gNextRoundShouldBe=0;
			gCanni=true;
		}
		else
		if(id==gMode_Ninja)
		{
			gNextRoundShouldBe=0;
			gNinja=true;
		}
		else
		if(id==gMode_Plasma)
		{
			gNextRoundShouldBe=0;
			gPlasma=true;
		}
		else
		if(id==gMode_Nightmare)
		{
			gNextRoundShouldBe=0;
			gNightmare=true;
		}
		else
		if(id==gMode_Alien)
		{
			gNextRoundShouldBe=0;
			gAlien=true;
		}
		else
		if(id==gMode_Race)
		{
			gNextRoundShouldBe=0;
			gRace=true;
		}	
	}	
	
	for (new i = 1;i < 33;i++)
	{
		iParticipating[i]=0;
	}
	gSpecialRound = 0
	gSelectedMode = 0
}

GetAliveCount()
{
	new iAlive, id
	
	for (id = 1; id < 33; id++)
	{
		if (is_user_alive(id))
			iAlive++
	}	
	return iAlive;
}

GetPlayerCount()
{
	new iConnected, id
	
	for (id = 1; id < 33; id++)
	{
		if (is_user_connected(id))
			iConnected++
	}	
	return iConnected;
}


public native_select_participator2()
{
		
	return SelectedPlayer2;
}

public native_select_participator3()
{
	return SelectedPlayer3;
}

CheckAlien()
{
	new mapname[32]
	get_mapname(mapname, charsmax(mapname))
	if(equali(mapname,"zm_cubeworld_v1"))
	{
	}
	else
	if(equali(mapname,"zm_zod_abyss"))
	{
	}
	else
	if(equali(mapname,"zm_zod_dustb"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_laser"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_stonedust2"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_colors"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_blueroom_v3"))
	{
	}else
	if(equali(mapname,"zm_lgk_assaulted2"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_appall"))
	{
	}  
	else
	if(equali(mapname,"zm_ds_laboratory"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_laboratory_v3"))
	{
	}
	else
	if(equali(mapname,"zm_downtown"))
	{
	}
	else
	if(equali(mapname,"zm_ds_vortex"))
	{
	}
	else
	if(equali(mapname,"zm_gc_vortex"))
	{
	}
	else
	if(equali(mapname,"zm_apprehension"))
	{
	}
	else
	if(equali(mapname,"zm_3rooms_remake"))
	{
	}
	else
	if(equali(mapname,"ugc_boss"))
	{
	}
	else
	if(equali(mapname,"zm_roz_hell_v1"))
	{
	}
	else
	if(equali(mapname,"zm_biohazard_base_mx"))
	{
	}
	else
	if(equali(mapname,"zm_gc_awaken"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_blueroom_remake2"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_tomb"))
	{
	}
	else
	if(equali(mapname,"zm_af-concert-2017_final"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_dirt"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_snowman_v3"))
	{
	}
	else
	if(equali(mapname,"zm_zod_fortuna"))
	{
	}
	else
	if(equali(mapname,"zm_antarctica_v2"))
	{
	}
	else
	if(equali(mapname,"zm_zod_hideout"))
	{
	}
	else
	if(equali(mapname,"zm_zod_labtest"))
	{
	}
	else
	if(equali(mapname,"zm_roz_frozen"))
	{
	}
	else
	if(equali(mapname,"lgk_zm_clusterFUK-2"))
	{
	}
	else
	if(equali(mapname,"zm_roz_valar_final"))
	{
	}
	else
	if(equali(mapname,"zm_lgk_juggernaut"))
	{
	}
	else
	if(equali(mapname,"zm_gc_temple"))
	{
	}
	else
	if(equali(mapname,"zm_gc_containership"))
	{
	}
	else
	if(equali(mapname,"zm_aztec_infinity"))
	{
	}
	else
	if(equali(mapname,"zm_new_army"))
	{
	}
	else
	if(equali(mapname,"zm_oldstyle"))
	{
	}
	else
	if(equali(mapname,"zm_minecraft"))
	{
	}
	else
	if(equali(mapname,"zm_toronto_v4"))
	{
	}
	else
	if(equali(mapname,"zm_a_zow_christmas"))
	{
	}
	else
	if(equali(mapname,"zm_area51_v2"))
	{
	}
	else
	if(equali(mapname,"zm_alternative_v2"))
	{
	}
	else
	if(equali(mapname,"zm_coldsteel_v4"))
	{
	}
	else
	if(equali(mapname,"zm_ds_aztec"))
	{
	}
	else
	if(equali(mapname,"zm_exertion_aj_v1"))
	{
	}
	else
	if(equali(mapname,"zm_gc_assaulted2"))
	{
	}
	else
	if(equali(mapname,"zm_gc_assaulted_final"))
	{
	}
	else
	if(equali(mapname,"zm_nub_house_final"))
	{
	}
	else
	if(equali(mapname,"zm_rylyn_v2z"))
	{
	}
	else
	if(equali(mapname,"zm_zod_cave_z"))
	{
	}
	else
	{
		gAlien=true;
	}
}
