/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <sqlx> 

#define PLUGIN "Points Bank + Logger"
#define VERSION "1.2"
#define AUTHOR "Lord. Death."

//  Mysql Information
new Host[]     = "74.91.123.158"
new User[]    = "LordD"
new Pass[]     = "jxdPq2SmA0mR"
new Db[]     = "zp_skins"

new Handle:g_SqlTuple
new g_Error[512]
new gSkin[33], gSkin2[33], gSkin3[33], gSkin4[33], gSkin5[33], gSkin6[33], gSkin7[33]
new gSkin8[33], gSkin9[33], gSkin10[33], gSkin11[33], gSkin12[33], SkinFinal

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)	
	set_task(2.0,"MySql_Init") // set a task to activate the mysql_init
}

public MySql_Init()
{
    g_SqlTuple = SQL_MakeDbTuple(Host,User,Pass,Db)
   
    new ErrorCode,Handle:SqlConnection = SQL_Connect(g_SqlTuple,ErrorCode,g_Error,charsmax(g_Error))
    if(SqlConnection == Empty_Handle)
        set_fail_state(g_Error)
       
    new Handle:Queries
    Queries = SQL_PrepareQuery(SqlConnection,"CREATE TABLE IF NOT EXISTS points (steamid varchar(32), nick varchar(32),skin INT(11),skin2 INT(11),skin3 INT(11),skin4 INT(11),skin5 INT(11),skin6 INT(11),skin7 INT(11),skin8 INT(11),skin9 INT(11),skin10 INT(11),skin11 INT(11),skin12 INT(11))")

    if(!SQL_Execute(Queries))
    {
        SQL_QueryError(Queries,g_Error,charsmax(g_Error))
        set_fail_state(g_Error)
       
    }
    
    SQL_FreeHandle(Queries)
   
    SQL_FreeHandle(SqlConnection)   
} 

public plugin_end()
{
    SQL_FreeHandle(g_SqlTuple)
} 
public plugin_natives()
{
	register_native("zp_assign_class_id", "native_assign_skin", 1)	
	register_native("zp_return_class_id", "native_return_skin_id", 1)	
}
public Test_Sav(id)
{
	new Random = random_num(1,12)
	native_assign_skin(id, Random, 1)
}
public native_return_skin_id(id, skinid)
{
	if(skinid == 1)
		return gSkin[id];
	else if(skinid == 2)
		return gSkin2[id];
	else if(skinid == 3)
		return gSkin3[id];		
	else if(skinid == 4)
		return gSkin4[id];		
	else if(skinid == 5)
		return gSkin5[id];
	else if(skinid == 6)
		return gSkin6[id];
	else if(skinid == 7)
		return gSkin7[id];
	else if(skinid == 8)
		return gSkin8[id];
	else if(skinid == 9)
		return gSkin9[id];
	else if(skinid == 10)
		return gSkin10[id];
	else if(skinid == 11)
		return gSkin11[id];	

	return gSkin12[id];
}
public native_assign_skin(id, skinid, skin)
{
	if(skinid == 1)
		gSkin[id] = skin
	else if(skinid == 2)
		gSkin2[id] = skin
	else if(skinid == 3)
		gSkin3[id] = skin		
	else if(skinid == 4)
		gSkin4[id] = skin		
	else if(skinid == 5)
		gSkin5[id] = skin
	else if(skinid == 6)
		gSkin6[id] = skin
	else if(skinid == 7)
		gSkin7[id] = skin
	else if(skinid == 8)
		gSkin8[id] = skin
	else if(skinid == 9)
		gSkin9[id] = skin
	else if(skinid == 10)
		gSkin10[id] = skin
	else if(skinid == 11)
		gSkin11[id] = skin	
	else
		gSkin12[id] = skin
	SkinFinal = skinid
	Save_MySql(id)
}
	
public Load_MySql(id)
{
    new szSteamId[32], szTemp[512], iPlayerNick[32]
    get_user_authid(id, szSteamId, charsmax(szSteamId))
    get_user_name(id, iPlayerNick, charsmax(iPlayerNick))

    new Data[1]
    Data[0] = id
    format(szTemp,charsmax(szTemp),"SELECT * FROM `points` WHERE (`points`.`steamid` = '%s')", szSteamId)
    SQL_ThreadQuery(g_SqlTuple,"register_client",szTemp,Data,1)
}

public register_client(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
    if(FailState == TQUERY_CONNECT_FAILED)
    {
        log_amx("Load - Could not connect to SQL database.  [%d] %s", Errcode, Error)
    }
    else if(FailState == TQUERY_QUERY_FAILED)
    {
        log_amx("Load Query failed. [%d] %s", Errcode, Error)
    }

    new id
    id = Data[0]
    
    if(SQL_NumResults(Query) < 1) 
    {
        //.if there are no results found
        
        new szSteamId[32], iPlayerNick[32]
        get_user_authid(id, szSteamId, charsmax(szSteamId)) // get user's steamid
        get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
        if (equal(szSteamId,"ID_PENDING"))
            return PLUGIN_HANDLED
            
        new szTemp[512]
        
        // now we will insturt the values into our table.
        format(szTemp,charsmax(szTemp),"INSERT INTO `points` ( `steamid` , `nick` , `skin` , `skin2` , `skin3` , `skin4`, `skin5` , `skin6` , `skin7` , `skin8` , `skin9` , `skin10` , `skin11` , `skin12` ) VALUES ('%s', '%s' , '0' , '0' , '0' , '0' , '0' , '0' , '0' ,'0' , '0' , '0' , '0' , '0');", szSteamId, iPlayerNick)
        SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
    } 
    else 
    {
    
        // if there are results found
        gSkin[id] = SQL_ReadResult(Query, 2)
        gSkin2[id] = SQL_ReadResult(Query, 3)
        gSkin3[id] = SQL_ReadResult(Query, 4)
        gSkin4[id] = SQL_ReadResult(Query, 5)
        gSkin5[id] = SQL_ReadResult(Query, 6)
        gSkin6[id] = SQL_ReadResult(Query, 7)
        gSkin7[id] = SQL_ReadResult(Query, 8)
        gSkin8[id] = SQL_ReadResult(Query, 9)
        gSkin9[id] = SQL_ReadResult(Query, 10)
        gSkin10[id] = SQL_ReadResult(Query, 11)
        gSkin11[id] = SQL_ReadResult(Query, 12)
        gSkin12[id] = SQL_ReadResult(Query, 13)
    }
    
    return PLUGIN_HANDLED
} 

public Save_MySql(id)
{
	new szSteamId[32],iPlayerNick[32], szTemp[512]
	get_user_authid(id, szSteamId, charsmax(szSteamId))
	get_user_name(id, iPlayerNick, charsmax(iPlayerNick))
	format(szTemp,charsmax(szTemp),"UPDATE `points` SET `skin` = '%i', `skin2` = '%i', `skin3` = '%i', `skin4` = '%i', `skin5` = '%i', `skin6` = '%i', `skin7` = '%i', `skin8` = '%i', `skin9` = '%i', `skin10` = '%i', `skin11` = '%i', `skin12` = '%i' WHERE `points`.`steamid` = '%s'", gSkin[id], gSkin2[id], gSkin3[id], gSkin4[id],gSkin5[id], gSkin6[id], gSkin7[id], gSkin8[id],gSkin9[id], gSkin10[id], gSkin11[id], gSkin12[id], szSteamId)
	SQL_ThreadQuery(g_SqlTuple,"IgnoreHandle",szTemp)
	LogSkinInfo("Player: %s Bought SkinID: %d", szSteamId, SkinFinal)
} 

public client_putinserver(id) Load_MySql(id)

public IgnoreHandle(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
    SQL_FreeHandle(Query)
    
    return PLUGIN_HANDLED
}

stock LogSkinInfo(const message_fmt[], any:...)
{
	static message[256], filename[32], date[16];
	vformat(message, charsmax(message), message_fmt, 2);
	format_time(date, charsmax(date), "%Y%m%d");
	formatex(filename, charsmax(filename), "Skins_%s.log", date);
	log_to_file(filename, "%s", message);
}