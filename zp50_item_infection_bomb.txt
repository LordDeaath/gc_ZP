/*================================================================================

---------------------------------
-*- [ZP] Item: Infection Bomb -*-
---------------------------------

This plugin is part of Zombie Plague Mod and is distributed under the
terms of the GNU General Public License. Check ZP_ReadMe.txt for details.

================================================================================*/

#define ITEM_NAME "Infection Bomb"
#define ITEM_COST 20

#include <amxmodx>
#include <fun>
#include <fakemeta>
#include <hamsandwich>
#include <amx_settings_api>
#include <cs_weap_models_api>
#include <zp50_items>
#include <zp50_gamemodes>
#include <colorchat>


//native Restrict_Antidote()
	
native Block_Antidote(id, reason)
native zp_is_apocalypse();

new Blocked[33]

enum
{
	ALLOWED,
	FIRSTZM,
	BOMB,
	TVIRUS,
	BOMBED
}
// Settings file
new const ZP_SETTINGS_FILE[] = "zombieplague.ini"

// Default sounds
new const sound_grenade_infect_explode[][] = { "zombie_plague/grenade_infect.wav" }
new const sound_grenade_infect_player[][] = { "scientist/scream20.wav" , "scientist/scream22.wav" , "scientist/scream05.wav" }

#define MODEL_MAX_LENGTH 64
#define SOUND_MAX_LENGTH 64
#define SPRITE_MAX_LENGTH 64
#define TASK_D 264658
// Models
new g_model_grenade_infect[MODEL_MAX_LENGTH] = "models/zombie_plague/v_grenade_infect.mdl"

// Sprites
new g_sprite_grenade_trail[SPRITE_MAX_LENGTH] = "sprites/laserbeam.spr"
new g_sprite_grenade_ring[SPRITE_MAX_LENGTH] = "sprites/shockwave.spr"

new Array:g_sound_grenade_infect_explode
new Array:g_sound_grenade_infect_player

// Explosion radius for custom grenades
const Float:NADE_EXPLOSION_RADIUS = 240.0

// HACK: pev_ field used to store custom nade types and their values
const PEV_NADE_TYPE = pev_flTimeStepSound
const NADE_TYPE_INFECTION = 1111

new g_trailSpr, g_exploSpr

new g_ItemID
new g_GameModeInfectionID
new g_GameModeMultiID
new g_NadeUser, BombRound

new bool:Bought[33]
new bool:BoughtTeam

/*new IsAntiAllowed;
new Trie:g_tAuthIdBlackList
new Minutes,Seconds;*/
new cvar_infection_bomb_delay, cvar_block_anti;
native set_tvirus_limit(lim)
public plugin_init()
{
	register_plugin("[ZP] Item: Infection Bomb", ZP_VERSION_STRING, "ZP Dev Team")
	register_forward(FM_SetModel, "fw_SetModel")
	RegisterHam(Ham_Think, "grenade", "fw_ThinkGrenade")
	RegisterHam(Ham_Killed,"player","Player_Death")
	cvar_infection_bomb_delay = register_cvar("zp_infection_bomb_delay","210")
	cvar_block_anti = register_cvar("zp_nade_block_anti", "1")
	//cvar_infection_bomb_map_limit = register_cvar("zp_infection_bomb_map_limit","1")
	g_ItemID = zp_items_register("Infection Bomb", "Infect multiple humans", 90, 1, 0);
	
	//g_tAuthIdBlackList = TrieCreate()     
}
/*
public plugin_end( )
{
	TrieDestroy( g_tAuthIdBlackList ) // Destroys the trie when the map changes or the server shuts down
}
*/
public plugin_natives()
{
	// register_native("zp_nade_bought","native_nade_bought",1)
	register_native("give_infection_bomb","native_give_infection_bomb",1);
	register_native("block_infection_bomb","native_block_infection_bomb",1);
}

// public native_nade_bought()
// {
// 	return BoughtTeam;
// }
public Player_Death(id)
{
	if(!zp_core_is_zombie(id))
		return HAM_IGNORED;

	
	new current_mode = zp_gamemodes_get_current()
	if (current_mode != g_GameModeInfectionID && current_mode != g_GameModeMultiID)
		return HAM_IGNORED;

	if(!user_has_weapon(id,CSW_HEGRENADE))
		return HAM_IGNORED;
	
	if(pev(id,pev_button)&IN_ATTACK)
		return HAM_IGNORED;

	new name[33];
	get_user_name(id,name,charsmax(name))
	BoughtTeam=false
	ColorChat(0,GREEN,"[GC]^3 %s ^1 died with the ^3Infection Bomb.^1 It is available again to buy.",name)
	return HAM_IGNORED;
}

public zp_fw_gamemodes_start()
{
	for(new id=1;id<33;id++)
	{
		//Bought[id]=false
		Blocked[id]=false;
	}
	BoughtTeam=false;
	new BombState = random_num(1,15)
	switch(BombState)
	{
		case 1..3:
		{
			BombRound = 1 // Normal
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4available")
		}
		case 4:
		{
			BombRound = 2 // Delayed
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4delayed")
			set_tvirus_limit(2)
		}
		case 5..7:
		{
			BombRound = 1 // Normal
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4available")
		}
		case 8:
		{
			BombRound = 3 // Delayed
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4unavailable")
			set_tvirus_limit(3)
		}
		case 9..11:
		{
			BombRound = 1 // Normal
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4available")
		}
		case 12:
		{
			BombRound = 2 // Normal
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4delayed")
			set_tvirus_limit(2)
		}
		case 13:
		{
			BombRound = 1 // Normal
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4available")
		}
		case 14:
		{
			BombRound = 2 // Normal
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4delayed")
		}
		case 15:
		{
			BombRound = 3 // Delayed
			ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4unavailable")
			set_tvirus_limit(3)
		}
	}
	if(BombRound == 2)
		set_task(get_pcvar_float(cvar_infection_bomb_delay),"UnlockBomb",TASK_D)
}
public UnlockBomb()
{
	BombRound = 1
	ColorChat(0,GREEN,"[GC]^3 Infection bomb^1 is ^4available ^3now")
}
public zp_fw_gamemodes_end(mod)
{
	if(task_exists(TASK_D))
		remove_task(TASK_D)
}
public plugin_end()
{
	ArrayDestroy(g_sound_grenade_infect_explode)
	ArrayDestroy(g_sound_grenade_infect_player)
}

public plugin_precache()
{
	// Initialize arrays
	g_sound_grenade_infect_explode = ArrayCreate(SOUND_MAX_LENGTH, 1)
	g_sound_grenade_infect_player = ArrayCreate(SOUND_MAX_LENGTH, 1)
	
	// Load from external file
	amx_load_setting_string_arr(ZP_SETTINGS_FILE, "Sounds", "GRENADE INFECT EXPLODE", g_sound_grenade_infect_explode)
	amx_load_setting_string_arr(ZP_SETTINGS_FILE, "Sounds", "GRENADE INFECT PLAYER", g_sound_grenade_infect_player)
	
	// If we couldn't load custom sounds from file, use and save default ones
	new index
	if (ArraySize(g_sound_grenade_infect_explode) == 0)
	{
		for (index = 0; index < sizeof sound_grenade_infect_explode; index++)
			ArrayPushString(g_sound_grenade_infect_explode, sound_grenade_infect_explode[index])
		
		// Save to external file
		amx_save_setting_string_arr(ZP_SETTINGS_FILE, "Sounds", "GRENADE INFECT EXPLODE", g_sound_grenade_infect_explode)
	}
	if (ArraySize(g_sound_grenade_infect_player) == 0)
	{
		for (index = 0; index < sizeof sound_grenade_infect_player; index++)
			ArrayPushString(g_sound_grenade_infect_player, sound_grenade_infect_player[index])
		
		// Save to external file
		amx_save_setting_string_arr(ZP_SETTINGS_FILE, "Sounds", "GRENADE INFECT PLAYER", g_sound_grenade_infect_player)
	}
	
	// Load from external file, save if not found
	if (!amx_load_setting_string(ZP_SETTINGS_FILE, "Weapon Models", "GRENADE INFECT", g_model_grenade_infect, charsmax(g_model_grenade_infect)))
		amx_save_setting_string(ZP_SETTINGS_FILE, "Weapon Models", "GRENADE INFECT", g_model_grenade_infect)
	if (!amx_load_setting_string(ZP_SETTINGS_FILE, "Grenade Sprites", "TRAIL", g_sprite_grenade_trail, charsmax(g_sprite_grenade_trail)))
		amx_save_setting_string(ZP_SETTINGS_FILE, "Grenade Sprites", "TRAIL", g_sprite_grenade_trail)
	if (!amx_load_setting_string(ZP_SETTINGS_FILE, "Grenade Sprites", "RING", g_sprite_grenade_ring, charsmax(g_sprite_grenade_ring)))
		amx_save_setting_string(ZP_SETTINGS_FILE, "Grenade Sprites", "RING", g_sprite_grenade_ring)
	
	// Precache sounds
	new sound[SOUND_MAX_LENGTH]
	for (index = 0; index < ArraySize(g_sound_grenade_infect_explode); index++)
	{
		ArrayGetString(g_sound_grenade_infect_explode, index, sound, charsmax(sound))
		precache_sound(sound)
	}
	for (index = 0; index < ArraySize(g_sound_grenade_infect_player); index++)
	{
		ArrayGetString(g_sound_grenade_infect_player, index, sound, charsmax(sound))
		precache_sound(sound)
	}
	
	// Precache models
	precache_model(g_model_grenade_infect)
	g_trailSpr = precache_model(g_sprite_grenade_trail)
	g_exploSpr = precache_model(g_sprite_grenade_ring)
}

public plugin_cfg()
{
	g_GameModeInfectionID = zp_gamemodes_get_id("Infection Mode")
	g_GameModeMultiID = zp_gamemodes_get_id("Multiple Infection Mode")
}

public zp_fw_items_select_pre(id, itemid, ignorecost)
{
	// This is not our item
	if (itemid != g_ItemID)
		return ZP_ITEM_AVAILABLE;
	
	// Infection bomb only available during infection modes
	new current_mode = zp_gamemodes_get_current()
	if (current_mode != g_GameModeInfectionID && current_mode != g_GameModeMultiID)
		return ZP_ITEM_DONT_SHOW;
	
	
	// Infection bomb only available to zombies
	if (!zp_core_is_zombie(id))
		return ZP_ITEM_DONT_SHOW;	
		
	if(zp_is_apocalypse())
	{		
		zp_items_menu_text_add("(Apocalypse)")
		return ZP_ITEM_NOT_AVAILABLE;
	}
			
	if(Blocked[id])
	{
		zp_items_menu_text_add("(Used Antidote)")
		return ZP_ITEM_NOT_AVAILABLE;
	}
	/*if (!IsAntiAllowed)
	{
		static text[32]
		new filler[2]=""
		if(Seconds<10)
		{
			filler="0";
		}
		formatex(text,charsmax(text), "(Wait for %d:%s%d)",Minutes,filler,Seconds);
		zp_items_menu_text_add(text)		
		return ZP_ITEM_NOT_AVAILABLE;
	}*/
	
	// Player already owns infection bomb
	if (user_has_weapon(id, CSW_HEGRENADE))
		return ZP_ITEM_NOT_AVAILABLE;
	/*
	new authid[32],limit
	get_user_authid(id, authid, charsmax(authid))
	TrieGetCell(g_tAuthIdBlackList, authid, limit)
	
	if(get_pcvar_num(cvar_infection_bomb_map_limit))
	{
		if(limit >= get_pcvar_num(cvar_infection_bomb_map_limit))
		{
			static text[32]
			formatex(text,charsmax(text),"%d PER MAP",get_pcvar_num(cvar_infection_bomb_map_limit))
			
			zp_items_menu_text_add(text)		
			return ZP_ITEM_NOT_AVAILABLE;
		}
	}*/

	if(BoughtTeam||Bought[id])
	{
		zp_items_menu_text_add("[1/1]");
		return ZP_ITEM_NOT_AVAILABLE;
	}
	if(BombRound == 3)
	{
		zp_items_menu_text_add("(No Bomb This Round)");
		return ZP_ITEM_NOT_AVAILABLE;
	}
	if(BombRound == 2)
	{
		zp_items_menu_text_add("(Unlocks Soon)");
		return ZP_ITEM_NOT_AVAILABLE;
	}
	zp_items_menu_text_add("[0/1]");	
	return ZP_ITEM_AVAILABLE;
}

public zp_fw_items_select_post(id, itemid, ignorecost)
{
	// This is not our item
	if (itemid != g_ItemID)
		return;
	
	BoughtTeam = true;
	Bought[id] = true;
	Block_Antidote(id, BOMB);
	give_item(id, "weapon_hegrenade")
	new name[32];
	g_NadeUser=id;
	get_user_name(g_NadeUser, name, 31);
	ColorChat(0, GREEN, "[GC]^3 %s ^1 Bought the^3 Infection Bomb", name);
	
	/*new authid[32],limit
	get_user_authid(id, authid, charsmax(authid))
	TrieGetCell(g_tAuthIdBlackList, authid, limit)
	TrieSetCell(g_tAuthIdBlackList, authid, limit+1)*/
}

public native_block_infection_bomb(id)
{
	Blocked[id]=true;
}
public native_give_infection_bomb(id)
{
	// Infection bomb only available during infection modes
	new current_mode = zp_gamemodes_get_current()
	if (current_mode != g_GameModeInfectionID && current_mode != g_GameModeMultiID)
		return 2;
	
	// Infection bomb only available to zombies
	if (!zp_core_is_zombie(id))
		return 0;
	
/*	if (!IsAntiAllowed)
		return 3;*/
	if(Blocked[id])
	{
		zp_items_menu_text_add("(Used Antidote)")
		return ZP_ITEM_NOT_AVAILABLE;
	}
	// Reached infection bomb limit for this round
	if (BoughtTeam)
		return 4;
	
	if(Bought[id])
		return 5;

	// Player already owns infection bomb
	if (user_has_weapon(id, CSW_HEGRENADE))
		return 0;
	
	//Restrict_Antidote();
	// Give infection bomb
	Block_Antidote(id, BOMB);
	give_item(id, "weapon_hegrenade")
	new name[32];
	g_NadeUser=id;
	get_user_name(g_NadeUser, name, 31);
	ColorChat(0, GREEN, "[GC]^3 %s ^1 Bought the^3 Infection Bomb", name);
	return 1;
	/*i = 1;
	while (i <= 32)
	{
		if (is_user_connected(i))
		{
			if (get_user_flags(i, 0) & 2)
			{
				ColorChat(i, GREEN, "UGC |^3 %s ^1 Bought the infection bomb", name);
			}
		}
		i++;
	}
	return 1;*/
	
}

public zp_fw_core_cure(id, attacker)
{
	// Remove custom grenade model
	cs_reset_player_view_model(id, CSW_HEGRENADE)
}

public zp_fw_core_infect_post(id, attacker)
{
	// Set custom grenade model
	cs_set_player_view_model(id, CSW_HEGRENADE, g_model_grenade_infect)
}

// Forward Set Model
public fw_SetModel(entity, const model[])
{
	// We don't care
	if (strlen(model) < 8)
		return;
	
	// Narrow down our matches a bit
	if (model[7] != 'w' || model[8] != '_')
		return;
	
	// Get damage time of grenade
	static Float:dmgtime
	pev(entity, pev_dmgtime, dmgtime)
	
	// Grenade not yet thrown
	if (dmgtime == 0.0)
		return;
	
	// Grenade's owner isn't zombie?
	if (!zp_core_is_zombie(pev(entity, pev_owner)))
		return;
	
	// HE Grenade
	if (model[9] == 'h' && model[10] == 'e')
	{
		// Give it a glow
		fm_set_rendering(entity, kRenderFxGlowShell, 0, 200, 0, kRenderNormal, 16);
		
		// And a colored trail
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(TE_BEAMFOLLOW) // TE id
		write_short(entity) // entity
		write_short(g_trailSpr) // sprite
		write_byte(10) // life
		write_byte(10) // width
		write_byte(0) // r
		write_byte(200) // g
		write_byte(0) // b
		write_byte(200) // brightness
		message_end()
		
		// Set grenade type on the thrown grenade entity
		set_pev(entity, PEV_NADE_TYPE, NADE_TYPE_INFECTION)		
		BoughtTeam=true;
		Bought[pev(entity,pev_owner)]=true;	
	}
}

// Ham Grenade Think Forward
public fw_ThinkGrenade(entity)
{
	// Invalid entity
	if (!pev_valid(entity)) return HAM_IGNORED;
	
	// Get damage time of grenade
	static Float:dmgtime
	pev(entity, pev_dmgtime, dmgtime)
	
	// Check if it's time to go off
	if (dmgtime > get_gametime())
		return HAM_IGNORED;
	
	// Check if it's one of our custom nades
	switch (pev(entity, PEV_NADE_TYPE))
	{
		case NADE_TYPE_INFECTION: // Infection Bomb
		{
			infection_explode(entity)			
			return HAM_SUPERCEDE;
		}
	}
	
	return HAM_IGNORED;
}

// Infection Bomb Explosion
infection_explode(ent)
{
	// Round ended
	if (zp_gamemodes_get_current() == ZP_NO_GAME_MODE)
	{
		// Get rid of the grenade
		engfunc(EngFunc_RemoveEntity, ent)
		return;
	}
	
	new name[32];
	new attacker = pev(ent, pev_owner)
	get_user_name(attacker, name, 31);
	
	// Get origin
	static Float:origin[3]
	pev(ent, pev_origin, origin)
	
	// Make the explosion
	create_blast(origin)
	
	// Infection nade explode sound
	static sound[SOUND_MAX_LENGTH]
	ArrayGetString(g_sound_grenade_infect_explode, random_num(0, ArraySize(g_sound_grenade_infect_explode) - 1), sound, charsmax(sound))
	emit_sound(ent, CHAN_WEAPON, sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	
	// Get attacker
	
	// Infection bomb owner disconnected or not zombie anymore?
		/*	if (!is_user_connected(attacker) || !zp_core_is_zombie(attacker))
	{
		// Get rid of the grenade
		engfunc(EngFunc_RemoveEntity, ent)
		return;
	}*/
	
	// Collisions
	new victim = -1
	new casualties;
	while ((victim = engfunc(EngFunc_FindEntityInSphere, victim, origin, NADE_EXPLOSION_RADIUS)) != 0)
	{
		// Only effect alive humans	
		if (!is_user_alive(victim))
		{
			continue;
		}
		if(zp_core_is_zombie(victim))
			continue;
		// Last human is killed
		if (zp_core_get_human_count() == 1)
		{
			casualties++; 
			ExecuteHamB(Ham_Killed, victim, attacker, 0)
			continue;
		}	 
		
		if(is_user_alive(attacker))
			zp_core_infect(victim, attacker)
		else
			zp_core_infect(victim)
		if(get_pcvar_num(cvar_block_anti))
			Block_Antidote(victim, BOMBED)
		casualties++;
		// Victim's sound
		ArrayGetString(g_sound_grenade_infect_player, random_num(0, ArraySize(g_sound_grenade_infect_player) - 1), sound, charsmax(sound))
		emit_sound(victim, CHAN_VOICE, sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	}

	new current_mode = zp_gamemodes_get_current()
	if (current_mode == g_GameModeInfectionID || current_mode == g_GameModeMultiID)
	{	
		if(casualties==0)
		{			
			new name[33];
			get_user_name(attacker,name,charsmax(name))
			BoughtTeam=false;
			ColorChat(0,GREEN,"[GC]^3 %s ^1 failed the ^3Infection Bomb.^1 It is available again to buy.",name)
		}
		else
		{		
			ColorChat(0, GREEN, "[GC]^3 %s ^1 used the^3 Infection Bomb", name);
		}
	}
	engfunc(EngFunc_RemoveEntity, ent)
}

// Infection Bomb: Green Blast
create_blast(const Float:origin[3])
{
	// Smallest ring
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, origin, 0)
	write_byte(TE_BEAMCYLINDER) // TE id
	engfunc(EngFunc_WriteCoord, origin[0]) // x
	engfunc(EngFunc_WriteCoord, origin[1]) // y
	engfunc(EngFunc_WriteCoord, origin[2]) // z
	engfunc(EngFunc_WriteCoord, origin[0]) // x axis
	engfunc(EngFunc_WriteCoord, origin[1]) // y axis
	engfunc(EngFunc_WriteCoord, origin[2]+385.0) // z axis
	write_short(g_exploSpr) // sprite
	write_byte(0) // startframe
	write_byte(0) // framerate
	write_byte(4) // life
	write_byte(60) // width
	write_byte(0) // noise
	write_byte(0) // red
	write_byte(200) // green
	write_byte(0) // blue
	write_byte(200) // brightness
	write_byte(0) // speed
	message_end()
	
	// Medium ring
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, origin, 0)
	write_byte(TE_BEAMCYLINDER) // TE id
	engfunc(EngFunc_WriteCoord, origin[0]) // x
	engfunc(EngFunc_WriteCoord, origin[1]) // y
	engfunc(EngFunc_WriteCoord, origin[2]) // z
	engfunc(EngFunc_WriteCoord, origin[0]) // x axis
	engfunc(EngFunc_WriteCoord, origin[1]) // y axis
	engfunc(EngFunc_WriteCoord, origin[2]+470.0) // z axis
	write_short(g_exploSpr) // sprite
	write_byte(0) // startframe
	write_byte(0) // framerate
	write_byte(4) // life
	write_byte(60) // width
	write_byte(0) // noise
	write_byte(0) // red
	write_byte(200) // green
	write_byte(0) // blue
	write_byte(200) // brightness
	write_byte(0) // speed
	message_end()
	
	// Largest ring
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, origin, 0)
	write_byte(TE_BEAMCYLINDER) // TE id
	engfunc(EngFunc_WriteCoord, origin[0]) // x
	engfunc(EngFunc_WriteCoord, origin[1]) // y
	engfunc(EngFunc_WriteCoord, origin[2]) // z
	engfunc(EngFunc_WriteCoord, origin[0]) // x axis
	engfunc(EngFunc_WriteCoord, origin[1]) // y axis
	engfunc(EngFunc_WriteCoord, origin[2]+555.0) // z axis
	write_short(g_exploSpr) // sprite
	write_byte(0) // startframe
	write_byte(0) // framerate
	write_byte(4) // life
	write_byte(60) // width
	write_byte(0) // noise
	write_byte(0) // red
	write_byte(200) // green
	write_byte(0) // blue
	write_byte(200) // brightness
	write_byte(0) // speed
	message_end()
}


// Set entity's rendering type (from fakemeta_util)
stock fm_set_rendering(entity, fx = kRenderFxNone, r = 255, g = 255, b = 255, render = kRenderNormal, amount = 16)
{
	static Float:color[3]
	color[0] = float(r)
	color[1] = float(g)
	color[2] = float(b)
	
	set_pev(entity, pev_renderfx, fx)
	set_pev(entity, pev_rendercolor, color)
	set_pev(entity, pev_rendermode, render)
	set_pev(entity, pev_renderamt, float(amount))
}