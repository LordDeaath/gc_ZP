/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <colorchat>

#define PLUGIN "Movement Jammer"
#define VERSION "1.0"
#define AUTHOR "zXCaptainXz"

new bool:gJamStrafe[33];
new bool:gJamDuck[33];
new bool:gJamJump[33];
new gCheckJump[33];
new gCheckDuck[33];
new FramesJ[33], Jumps[33], Perfect[33]
new FramesD[33], Ducks[33]

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_concmd("amx_jam_strafe","cmdJamStrafe",ADMIN_KICK,"<name or #userid>")
	register_concmd("amx_jam_jump","cmdJamJump",ADMIN_KICK,"<name or #userid>")
	register_concmd("amx_jam_duck","cmdJamDuck",ADMIN_KICK,"<name or #userid>")
	register_concmd("amx_check_jump","cmdCheckJump",ADMIN_KICK,"<name or #userid>")
	register_concmd("amx_check_duck","cmdCheckDuck",ADMIN_KICK,"<name or #userid>")
}

public cmdJamStrafe(id,level,cid)
{
	if (!cmd_access(id, level, cid, 2))
	return PLUGIN_HANDLED
	
	new arg[32] 
	
	read_argv(1, arg, charsmax(arg))
	new player = cmd_target(id, arg, 0)	
			
	if (!player)
		return PLUGIN_HANDLED
	
	if((get_user_flags(player) & ADMIN_IMMUNITY)&&!(get_user_flags(id)&ADMIN_RCON)&&player!=id) 
	{
		console_print(id,"[AMXX] You don't have enough access!")
		return PLUGIN_HANDLED;
	}
	
	new playername[32]
	new adminname[32]
	new authid[32],authid2[32]
	get_user_name(player,playername,charsmax(playername))
	get_user_name(id,adminname,charsmax(adminname))
	get_user_authid(player,authid2,charsmax(authid2))	
	get_user_authid(id,authid,charsmax(authid))
	
	if(!gJamStrafe[player])
	{		
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 is jamming^4 %s^3's strafes!",adminname,playername)
		}
		server_print("[GC] ADMIN <%s> is jamming <%s>'s strafes!",adminname,playername)
		// set_task(0.2,"JamStrafe",player,"",0,"b")
		gJamStrafe[player]=true;
		log_to_file("amx_exec.log","ADMIN %s <%s> is jamming %s <%s> strafes!",adminname,authid,playername,authid2)
	}
	else
	{
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 stopped jamming^4 %s^3's strafes!",adminname,playername)		
		}		
		server_print("[GC] ADMIN <%s> stopped jamming <%s>'s strafes!",adminname,playername)
		// remove_task(player);
		gJamStrafe[player]=false;			
		log_to_file("amx_exec.log","ADMIN %s <%s> stopped jamming %s <%s> strafes!",adminname,authid,playername,authid2)
	}
	return PLUGIN_HANDLED;
}
public cmdJamJump(id,level,cid)
{
	if (!cmd_access(id, level, cid, 2))
	return PLUGIN_HANDLED
	
	new arg[32] 
	
	read_argv(1, arg, charsmax(arg))
	new player = cmd_target(id, arg, 0 )	
			
	if (!player)
		return PLUGIN_HANDLED
	
	if((get_user_flags(player) & ADMIN_IMMUNITY)&&!(get_user_flags(id)&ADMIN_RCON)&&player!=id) 
	{
		console_print(id,"[AMXX] You don't have enough access!")
		return PLUGIN_HANDLED;
	}
	
	new playername[32]
	new adminname[32]
	new authid[32],authid2[32]
	get_user_name(player,playername,charsmax(playername))
	get_user_name(id,adminname,charsmax(adminname))
	get_user_authid(player,authid2,charsmax(authid2))	
	get_user_authid(id,authid,charsmax(authid))
	
	if(!gJamJump[player])
	{		
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 is jamming^4 %s^3's jumps!",adminname,playername)
		}
		server_print("[GC] ADMIN <%s> is jamming <%s>'s jumps!",adminname,playername)

		// set_task(0.1,"JamJump",player,"",0,"b")
		gJamJump[player]=true;			
		log_to_file("amx_exec.log","ADMIN %s <%s> is jamming %s <%s> jumps!",adminname,authid,playername,authid2)
	}
	else
	{
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 stopped jamming^4 %s^3's jumps!",adminname,playername)			
		}		
		server_print("[GC] ADMIN <%s> stopped jamming <%s>'s jumps!",adminname,playername)
		// remove_task(player);
		gJamJump[player]=false;		
		log_to_file("amx_exec.log","ADMIN %s <%s> stopped jamming %s <%s> jumps!",adminname,authid,playername,authid2)
	}
	return PLUGIN_HANDLED;
}

public cmdJamDuck(id,level,cid)
{
	if (!cmd_access(id, level, cid, 2))
	return PLUGIN_HANDLED
	
	new arg[32] 
	
	read_argv(1, arg, charsmax(arg))
	new player = cmd_target(id, arg, 0 )	
			
	if (!player)
		return PLUGIN_HANDLED
	
	if((get_user_flags(player) & ADMIN_IMMUNITY)&&!(get_user_flags(id)&ADMIN_RCON)&&player!=id) 
	{
		console_print(id,"[AMXX] You don't have enough access!")
		return PLUGIN_HANDLED;
	}
	
	new playername[32]
	new adminname[32]
	new authid[32],authid2[32]
	get_user_name(player,playername,charsmax(playername))
	get_user_name(id,adminname,charsmax(adminname))
	get_user_authid(player,authid2,charsmax(authid2))	
	get_user_authid(id,authid,charsmax(authid))
	
	if(!gJamDuck[player])
	{		
		
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 is jamming^4 %s^3's ducks!",adminname,playername)		
		}
		server_print("[GC] ADMIN <%s> is jamming <%s>'s ducks!",adminname,playername)
		// set_task(0.1,"JamDuck",player,"",0,"b")
		gJamDuck[player]=true;			
		log_to_file("amx_exec.log","ADMIN %s <%s> is jamming %s <%s> ducks!",adminname,authid,playername,authid2)
	}
	else
	{
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 stopped jamming^4 %s^3's ducks!",adminname,playername)			
		
		}		
		server_print("[GC] ADMIN <%s> stopped jamming <%s>'s ducks!",adminname,playername)
		// remove_task(player);
		gJamDuck[player]=false;
		log_to_file("amx_exec.log","ADMIN %s <%s> stopped jamming %s <%s> ducks!",adminname,authid,playername,authid2)
	}
	return PLUGIN_HANDLED;
}

// public JamStrafe(id)
// {
// 	client_cmd(id,"-moveleft")
// 	client_cmd(id,"-moveright")
// }

// public JamJump(id)
// {
// 	client_cmd(id,"-jump")
// }

// public JamDuck(id)
// {
// 	client_cmd(id,"-duck")
// }

public client_disconnected(id)
{
	// remove_task(id)
	gJamStrafe[id]=false;
	gJamJump[id]=false;
	gJamDuck[id]=false;
	gCheckJump[id]=0;
	gCheckDuck[id]=0;
}

public cmdCheckJump(id,level,cid)
{
	if (!cmd_access(id, level, cid, 2))
	return PLUGIN_HANDLED
	
	new arg[32] 
	
	read_argv(1, arg, charsmax(arg))
	new player = cmd_target(id, arg, 0 )	
			
	if (!player)
		return PLUGIN_HANDLED
	
	if((get_user_flags(player) & ADMIN_IMMUNITY)&&!(get_user_flags(id)&ADMIN_RCON)&&player!=id) 
	{
		console_print(id,"[AMXX] You don't have enough access!")
		return PLUGIN_HANDLED;
	}
	
	new playername[32]
	new adminname[32]
	get_user_name(player,playername,charsmax(playername))
	get_user_name(id,adminname,charsmax(adminname))
	
	if(!gCheckJump[player])
	{		
		
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 is checking^4 %s^3's jumps!",adminname,playername)		
		}
		server_print("[GC]ADMIN <%s> is checking <%s>'s jumps!",adminname,playername)
		Jumps[player]=0;
		Perfect[player]=0;
		FramesJ[player]=0;
		if(id)
		gCheckJump[player]=id;
		else
		gCheckJump[player]=33;
	}
	else
	{
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 stopped checking^4 %s^3's jumps!",adminname,playername)	
		}		
		server_print("[GC] ADMIN <%s> stopped checking <%s>'s jumps!",adminname,playername)
		gCheckJump[player]=0;
	}
	return PLUGIN_HANDLED;
}

public cmdCheckDuck(id,level,cid)
{
	if (!cmd_access(id, level, cid, 2))
	return PLUGIN_HANDLED
	
	new arg[32] 
	
	read_argv(1, arg, charsmax(arg))
	new player = cmd_target(id, arg, 0 )	
			
	if (!player)
		return PLUGIN_HANDLED
	
	if((get_user_flags(player) & ADMIN_IMMUNITY)&&!(get_user_flags(id)&ADMIN_RCON)&&player!=id) 
	{
		console_print(id,"[AMXX] You don't have enough access!")
		return PLUGIN_HANDLED;
	}
	
	new playername[32]
	new adminname[32]
	get_user_name(player,playername,charsmax(playername))
	get_user_name(id,adminname,charsmax(adminname))
	
	if(!gCheckDuck[player])
	{		
		
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 is checking^4 %s^3's ducks!",adminname,playername)		
		}
		server_print("[GC]ADMIN <%s> is checking <%s>'s ducks!",adminname,playername)
		Ducks[player]=0;
		Perfect[player]=0;
		FramesD[player]=0;
		if(id)
		gCheckDuck[player]=id;
		else
		gCheckDuck[player]=33;
	}
	else
	{
		for(new i=1;i<33;i++)
		{
			if(is_user_connected(i))
			if(get_user_flags(i)&ADMIN_KICK)
			if(i!=player||i==id)
			ColorChat(i, GREEN, "[GC]^3 ADMIN^4 %s^3 stopped checking^4 %s^3's ducks!",adminname,playername)	
		}		
		server_print("[GC] ADMIN <%s> stopped checking <%s>'s ducks!",adminname,playername)
		gCheckDuck[player]=0;
	}
	return PLUGIN_HANDLED;
}

public client_PreThink(id)
{
	if(!is_user_alive(id))
		return;
	
	if(gJamDuck[id])
	{
		if(entity_get_int(id, EV_INT_button)&IN_DUCK)
		client_cmd(id, "-duck")
	}

	if(gJamJump[id])
	{		
		if(entity_get_int(id, EV_INT_button)&IN_JUMP)
		client_cmd(id, "-jump")
	}

	if(gJamStrafe[id])
	{		
		if(entity_get_int(id, EV_INT_button)&IN_MOVERIGHT)
			client_cmd(id, "-moveright")		
		
		if(entity_get_int(id, EV_INT_button)&IN_MOVELEFT)
			client_cmd(id, "-moveleft")
	}

	if(gCheckJump[id]&&(entity_get_int(id, EV_INT_flags)&FL_ONGROUND))
	{
		FramesJ[id]++

		if((entity_get_int(id, EV_INT_button)&IN_JUMP)&&!(entity_get_int(id, EV_INT_oldbuttons)&IN_JUMP))
		{
			if(FramesJ[id]<10)
			{
				static name[32]
				get_user_name(id, name, charsmax(name))
				Jumps[id]++
				if(FramesJ[id]==1)
				{			
					Perfect[id]++
					if(is_user_connected(gCheckJump[id]))
						ColorChat(gCheckJump[id], GREEN, "[GC]^3 %s^1 did^3 %d^1 Perfect Jumps out of^3 %d",name, Perfect[id], Jumps[id])
					server_print("[GC] <%s> did <%d> Perfect Jumps out of <%d>",name, Perfect[id], Jumps[id])
				}
			}
			FramesJ[id] = 0		
		}	
	}

	if(gCheckDuck[id]&&(entity_get_int(id, EV_INT_flags)&FL_ONGROUND))
	{
		FramesD[id]++

		if(!(entity_get_int(id, EV_INT_button)&IN_DUCK)&&(entity_get_int(id, EV_INT_oldbuttons)&IN_DUCK)&&entity_get_int(id, EV_INT_bInDuck))
		{
			if(FramesD[id]<10)
			{					
				Ducks[id]++
				static name[32]
				get_user_name(id, name, charsmax(name))
				ColorChat(gCheckDuck[id], GREEN, "[GC]^3 %s^1 : ^3%d^1 Ground Frames (Duck Number^3 %d^1)",name, FramesD[id],Ducks[id])
				server_print("<%s> <%d> Ground Frames (Duck Number <%d>)", name, FramesD[id], Ducks[id])
			}
			FramesD[id]=0
		}		
	}
}